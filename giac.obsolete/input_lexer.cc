#line 2 "input_lexer.cc"

#line 4 "input_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE giac_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via giac_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void giac_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void giac_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void giac_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void giac_yypop_buffer_state (yyscan_t yyscanner );

static void giac_yyensure_buffer_stack (yyscan_t yyscanner );
static void giac_yy_load_buffer_state (yyscan_t yyscanner );
static void giac_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER giac_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE giac_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *giac_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *giac_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void giac_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer giac_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define giac_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 387
#define YY_END_OF_BUFFER 388
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1176] =
    {   0,
        0,    0,   23,   23,    0,    0,    0,    0,    0,    0,
      388,  386,    1,    2,  174,    3,  384,  137,  216,  182,
       31,   88,   89,  202,  176,   86,  197,  205,  211,  361,
      361,   34,   32,   84,  134,   85,   29,  149,  382,  382,
      382,  262,  382,  382,  382,  382,   42,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,   90,
       91,  223,   30,   16,  382,  382,  382,  382,  263,  382,
      382,  382,   38,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  106,  160,  107,   40,  382,
      382,  382,  382,  382,  386,   23,   25,   24,  387,  385,

      387,   15,    6,    5,  387,   18,   17,   19,    1,  121,
        0,    0,    0,    0,    0,    0,    0,    0,  138,  217,
      135,  383,   92,   93,    0,   44,   43,  383,  108,  109,
      155,  206,  207,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  225,  204,  177,
      178,   87,  179,  117,  180,  116,  208,  181,  199,  170,
      213,  380,  226,   22,    0,  212,  379,  361,    0,    0,
        0,    0,    0,    0,   36,   35,  141,    0,    0,    0,
      114,  128,  123,  147,  118,  146,  132,  115,  148,  150,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      328,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  279,  338,  382,  382,  382,  382,  165,
       49,  382,  382,   48,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      382,  382,  382,  382,  382,  252,  382,  382,  382,  382,
      382,  329,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  278,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  299,  382,   46,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  161,
       33,  382,  185,  186,  382,   59,   39,   37,   47,  382,
      382,  382,  382,  382,  382,    0,   23,   24,   24,   26,
        0,  385,   15,    4,   14,    7,    8,   12,   13,    9,
       11,   10,   18,    0,    0,  371,  372,  370,  374,  373,
      375,  218,  100,  101,   94,   95,  110,  111,  383,   98,
       99,   45,    0,  139,  219,    0,  209,  195,  200,    0,
      214,    0,  129,    0,    0,  136,    0,  131,    0,  153,
        0,  227,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  171,    0,    0,   21,  379,
        0,    0,  381,    0,  377,  376,  378,  362,    0,    0,
        0,    0,  156,  175,  382,  382,  382,  351,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  273,  342,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  347,
      382,  293,  382,  382,  382,  382,  382,  382,  382,  382,
      350,  382,  318,  382,  382,  382,  382,  382,  169,    0,
        0,    0,    0,    0,    0,  284,    0,    0,    0,    0,
        0,    0,  164,    0,    0,    0,    0,    0,    0,    0,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      272,  382,  382,  382,  382,  382,   54,  382,  382,  289,
      382,  382,  220,  294,  382,  292,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  224,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  166,    0,
      382,   41,  194,  187,  188,  189,  190,  191,  192,  264,
      356,  198,  183,   52,  184,  357,  359,  358,  360,  203,
      145,  144,  193,    7,    8,    0,    0,    0,    0,    0,
      102,  103,   96,   97,  112,  113,  122,  157,  172,  142,

      126,  124,  119,  133,  151,    0,    0,  283,    0,    0,
        0,    0,    0,  298,  163,    0,    0,    0,  162,    0,
      380,    0,    0,    0,  379,    0,  363,    0,   20,    0,
        0,    0,  382,  258,  259,  382,  382,  382,  382,  382,
      382,  345,  382,  382,  340,  348,  274,  382,  382,  382,
      382,  382,  281,  288,  341,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  330,  382,  325,  382,  382,
      159,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      222,    0,  296,    0,    0,    0,    0,    0,    0,    0,
      167,  382,  382,  382,  382,  382,  382,  382,  382,  256,

      382,  382,  382,    0,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  280,  382,
      382,   61,  382,  382,  382,  382,  382,  382,  382,  382,
      382,   71,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  316,  382,  317,  382,   62,   63,  382,  320,  382,
      382,  382,  382,  382,  382,  382,  382,    0,  382,    7,
        0,    0,  104,  105,  158,    0,    0,    0,    0,  221,
      295,    0,    0,  168,    0,  379,    0,    0,  336,  335,
      337,  257,  344,  260,  382,  382,  382,  382,  382,  268,
      382,  382,  382,  382,  382,  382,  307,  346,  332,  382,

      382,  382,  382,  354,  382,  334,  327,  343,    0,    0,
        0,    0,    0,    0,    0,  130,    0,  210,  196,    0,
        0,    0,    0,    0,    0,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,    0,    0,    0,  382,
      265,  267,  266,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,   68,   65,   64,  382,  382,  382,
      382,  382,  382,  302,  382,  382,  382,  382,  382,  382,
      305,  382,  382,  382,  382,  382,  382,   81,  382,  382,
      382,  382,  382,  382,   58,  382,  382,  382,  382,  326,
        0,  382,   27,   28,  249,  282,    0,    0,    0,    0,

        0,  382,  235,  349,  229,  382,  231,  382,  382,  382,
      382,  353,  311,  314,  382,  339,  382,  319,    0,    0,
      120,    0,  152,    0,    0,  291,  228,  173,    0,    0,
        0,  323,  382,  382,  382,  246,  250,  253,  382,  382,
      382,   74,  261,  276,  275,    0,  382,  382,  269,  270,
      382,  382,  382,  382,   67,  382,  382,  382,  382,  382,
      382,  241,  382,  301,  382,  382,   73,   76,  382,  382,
      382,  382,  309,  382,  382,  312,  382,  382,  382,  321,
      382,  382,  382,  382,  382,  382,   53,   82,   83,    0,
      290,    0,  322,  364,  382,  382,  382,  230,  232,  382,

      333,  382,  143,  215,    0,    0,    0,  140,    0,    0,
      382,  382,  382,  248,  251,  254,   77,  382,  382,    0,
      244,  382,  382,  300,   79,   72,  382,  382,  382,   70,
      382,  297,  382,  382,  382,  382,  382,  382,  382,  310,
      382,  382,  382,  382,  236,  382,  382,  382,   69,  324,
        0,  315,  365,  382,  331,  233,  382,  382,  154,    0,
      127,    0,  125,  382,  382,  382,  382,  382,  277,  382,
      271,  382,  285,   51,  382,   60,  382,   56,  382,  382,
      247,  308,  313,  382,  382,  382,  306,  382,  382,    0,
        0,    0,  352,  234,  355,    0,  201,  382,  382,  382,

      255,  382,  382,  382,   75,   57,  382,   80,  382,   66,
      382,  382,  382,  382,    0,  368,    0,  287,  382,  382,
      382,  382,  382,  382,  303,  382,  382,  382,  382,  382,
      286,    0,  366,  382,  382,  239,  382,  382,   50,  382,
      382,  382,  382,  382,    0,  367,  382,  238,  242,  382,
      382,  382,   78,   55,  382,  369,  382,  382,  245,  382,
      304,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  243,  237,  240,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   23,   23,   24,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       41,   48,   49,   50,   51,   52,   53,   54,   41,   41,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,

       65,   66,   67,   68,   69,   41,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   41,   85,   86,   87,   41,    1,   88,   89,   90,
       91,   92,   41,   41,   41,   93,   94,   95,   41,   41,
       41,   41,   41,   41,   41,   96,   41,   41,   41,   97,
       98,   41,   41,   99,   41,   41,   41,  100,   41,  101,
      102,  103,   41,  104,  105,  106,  107,   41,   41,   41,
      108,   41,   41,   41,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  120,   41,   41,   41,   41,
      121,   41,   41,  122,  123,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,  124,  125,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,  126,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,  127,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,    1
    } ;

static yyconst flex_int32_t yy_meta[128] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    4,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    1,    1,    1,    4,    1,    6,
        1,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    4,    3,    4,    1,    7,    8,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    4,    1,    4,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[1193] =
    {   0,
        0,    0,  125,  126,  127,  128,  129,  130,  131,  134,
     1733, 1734,  141, 1734, 1704, 1734,  183, 1734,  167,  134,
      262, 1734, 1734,  124,  131, 1715,  133,  150,  135,  238,
      160,  280, 1734,  128,  160,  173, 1734,  190,  106, 1682,
      191,  256,  110,  153, 1655,  196,  172,    0, 1688,  167,
     1681, 1678,  289,  199,  194,  186, 1693,  201, 1678, 1734,
     1734, 1734,  300, 1734,  236,  192,   73,  220,  276,  254,
      201, 1662,  222,  263,  269,  302, 1647,  316,  327,  334,
     1653,  284,  232, 1652, 1645, 1734, 1632, 1734,    0,  293,
      183,  273, 1629,  318, 1628,    0, 1734,  384, 1712, 1734,

     1734,    0, 1734, 1708,  396,    0, 1734, 1734,  366, 1734,
     1698, 1695,  415,  464,  482,  531,  403,  549, 1734,  452,
     1734,    0, 1734, 1734,  271,    0,    0, 1642, 1734, 1734,
     1734, 1734, 1734, 1682, 1698, 1697, 1697, 1695, 1694, 1693,
     1685, 1691, 1673,  416,  313,  418,  397, 1689,  249,  281,
      385, 1625,  100, 1633, 1624, 1622, 1609, 1734, 1734, 1734,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1676,
     1734,  538, 1734, 1734, 1690, 1734,  555,  601,  611,  410,
      420,  618, 1582, 1672, 1734, 1734, 1734, 1610, 1612, 1608,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,  470, 1734,

        0, 1652, 1608, 1649, 1635, 1638, 1611, 1618,  420, 1642,
        0,  539, 1605, 1630, 1608, 1628, 1598, 1595,  439, 1599,
     1603, 1597, 1609, 1619,    0, 1625, 1596, 1592, 1615,    0,
     1621, 1615, 1582,    0, 1586,  410,  391, 1578, 1621, 1608,
     1574, 1577, 1607, 1614, 1584, 1604,  393, 1582, 1574,  447,
      458, 1584,  587, 1574, 1570,  437, 1585,  456, 1572, 1570,
     1572, 1575, 1566, 1577, 1561,    0, 1575, 1563, 1564, 1558,
     1557,    0, 1569, 1554, 1551,  395, 1559, 1554, 1559, 1547,
      239, 1564, 1551, 1553,  434, 1557,  462, 1555, 1542, 1547,
     1555, 1551,  307, 1546,  477, 1542,    0,  394, 1536,  519,

     1540, 1536, 1539,  523, 1549, 1536, 1536, 1536, 1538,  528,
     1529, 1543, 1527,  566, 1538, 1539, 1524, 1531, 1522, 1734,
        0, 1594,    0,    0, 1475,    0,    0,    0,    0,  574,
     1487,  569,  504, 1497,  529, 1502,    0,  629,  643, 1734,
     1590, 1734,    0, 1734, 1734,  674,  679, 1734, 1734, 1734,
     1734, 1734,    0, 1577, 1574,  684, 1734, 1734,  704,  652,
      753,  742, 1734, 1734, 1734, 1734, 1734, 1734,    0, 1734,
     1734,    0, 1579, 1734, 1734, 1578, 1734, 1734, 1734, 1577,
     1734, 1576, 1734, 1575, 1574, 1734, 1573, 1734, 1572, 1734,
     1571, 1734, 1517, 1513,  444, 1500, 1505, 1513, 1497, 1564,

     1563, 1494, 1503, 1494, 1559, 1734,  785, 1566, 1734,  758,
      811,  689,  709,  821,  412,  736,  831,  740, 1565, 1494,
     1499, 1492,    0,    0, 1532, 1527, 1512,    0, 1490, 1509,
     1509, 1518, 1486, 1487, 1480, 1479, 1507, 1473,    0,    0,
     1477, 1500, 1482, 1476, 1480, 1469, 1472, 1508, 1500,    0,
     1467,    0, 1501, 1502, 1461, 1458, 1501, 1485, 1455, 1454,
        0, 1489, 1473, 1452, 1459, 1480, 1485, 1456,    0, 1462,
     1447, 1443, 1443, 1448, 1456, 1734, 1441,  356, 1446, 1454,
     1446, 1437, 1734, 1435, 1432, 1440, 1436, 1449,  595, 1433,
     1450, 1437, 1430,  732, 1426, 1435, 1441, 1428, 1421, 1432,

     1496, 1430, 1437, 1419, 1422, 1430,  555, 1416, 1424, 1428,
        0, 1416, 1410, 1423, 1425, 1422, 1417, 1420, 1405,    0,
     1406, 1402,    0,    0, 1409,    0, 1421, 1402, 1409, 1412,
     1397, 1397, 1419, 1400, 1388,    0, 1409, 1403, 1405, 1403,
      718, 1406, 1387, 1406, 1399, 1398, 1407, 1406, 1395, 1381,
     1393, 1379, 1391, 1386, 1377, 1374, 1385, 1380,    0, 1324,
     1343,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1734,  836,  849, 1433, 1432, 1429, 1428,  521,
     1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734,

     1734, 1734, 1734, 1734, 1734, 1433, 1365, 1734, 1377, 1376,
     1360, 1428, 1427, 1734, 1734, 1357, 1362, 1424, 1734,  857,
      862,  883,  893,  867,  898,  910,  915, 1431, 1734, 1370,
     1360, 1368, 1388,    0,    0, 1364, 1390, 1395, 1376, 1351,
     1345,    0, 1388, 1374,    0,    0,    0, 1350, 1345, 1350,
     1346, 1350,    0,    0,    0, 1367, 1379, 1349, 1338, 1380,
     1363, 1345, 1332, 1376, 1367,    0, 1341,    0, 1369, 1339,
     1734, 1334, 1333, 1340, 1327, 1321, 1333, 1321, 1318, 1315,
     1734, 1315, 1734, 1315, 1327, 1324, 1323, 1310, 1312, 1313,
     1734, 1307, 1320, 1310, 1309, 1313, 1320, 1308, 1303,    0,

     1307, 1312, 1295,  876, 1304, 1303, 1308, 1295, 1294, 1297,
     1292, 1289, 1296, 1301, 1292, 1289, 1292, 1283,    0, 1288,
     1305,  741, 1290, 1280, 1296, 1282, 1294, 1280, 1287, 1286,
     1292, 1734, 1271,  649, 1288, 1283,  585,  557, 1267, 1269,
     1290,    0, 1278,    0, 1270, 1734, 1734, 1281, 1267, 1279,
     1261, 1272, 1270, 1277, 1261, 1254, 1268, 1239, 1209,  926,
      534,  727, 1734, 1734, 1734, 1319, 1318, 1251, 1249, 1734,
     1734, 1249, 1252, 1734,  932,  939,  949, 1236, 1734, 1734,
     1734,    0,    0,    0, 1280, 1273, 1254, 1242, 1245,    0,
     1253, 1246, 1237, 1254, 1234, 1263,    0,    0,    0, 1262,

     1266, 1232, 1236, 1265, 1262,    0,    0,    0, 1239, 1241,
     1233, 1240, 1223, 1224, 1220, 1734, 1221, 1734, 1734, 1221,
     1232, 1231, 1218, 1203, 1202, 1178, 1181, 1156, 1156, 1150,
     1145, 1150, 1130, 1144, 1119, 1108, 1098, 1105, 1093, 1095,
        0,    0,    0, 1109, 1103, 1087, 1088, 1093, 1086, 1083,
     1106, 1091, 1085, 1089, 1734, 1734, 1734, 1074, 1097, 1084,
     1081, 1074, 1079,    0, 1071, 1081, 1094, 1093, 1083, 1087,
        0, 1071, 1079, 1064, 1077, 1064, 1067, 1734, 1059, 1059,
     1073, 1061, 1071, 1065,    0, 1060, 1058, 1054, 1059,    0,
     1029,  651, 1113, 1109, 1734, 1734, 1047,  179,  177,  287,

      232,  315,    0,    0,    0,  440,    0,  492,  502,  508,
      528,    0,    0,    0,  567,    0,  638,    0,  614,  650,
     1734,  661, 1734,  657,  710, 1734, 1734, 1734,  710,  723,
      730, 1734,  724,  724,  744,  736,  744,  745,  765,  748,
      741, 1734,    0, 1734, 1734,  751,  757,  770,    0,    0,
      770,  775,  791,  793, 1734,  776,  784,  783,  819,  806,
      833,    0,  827,    0,  829,  836, 1734, 1734,  834,  847,
      846,  859,    0,  849,  855,    0,  868,  873,  865,    0,
      866,  890,  900,  892,  913,  909, 1734,    0,    0,  910,
     1734,  965, 1734,  957,  933,  910,  901,    0,    0,  918,

        0,  937, 1734, 1734,  908,  923,  918, 1734,  927,  920,
      925,  932,  922,    0,    0,    0, 1734,  916,  937,  934,
        0,  937,  937,    0, 1734, 1734,  935,  923,  918, 1734,
      930,    0,  927,  942,  940,  942,  933,  937,  946,    0,
      946,  949,  947,  946,    0,  942,  952,  952, 1734,    0,
      955, 1734, 1001,  970,    0,    0,  961,  977, 1734,  965,
     1734,  950, 1734,  971,  967,  958,  968,  962, 1734,  963,
        0,  981,    0,    0,  971,    0, 1016,    0,  984,  962,
        0,    0,    0,  987,  975,  980,    0,  987,  970,  969,
     1029,  966,    0,    0,    0,  976, 1734,  978,  988,  994,

        0,  985,  999,  989, 1734,    0,  998, 1734,  994, 1734,
     1001, 1000,  997, 1006, 1057, 1049,  961, 1734, 1001, 1015,
     1012, 1014, 1002, 1019,    0, 1010, 1023, 1004, 1011, 1006,
     1734,  998, 1067, 1021, 1020,    0, 1029, 1026,    0, 1022,
     1031, 1043, 1033, 1026,  988, 1082, 1027,    0,    0, 1047,
     1036, 1036, 1734,    0, 1034, 1734, 1033, 1051,    0, 1037,
        0, 1046, 1045, 1045, 1044, 1054, 1059, 1048, 1044, 1044,
     1046,    0,    0,    0, 1734, 1175, 1183, 1191, 1199, 1204,
     1206, 1213, 1221, 1229, 1237, 1245, 1253, 1255, 1262, 1270,
     1278, 1286

    } ;

static yyconst flex_int16_t yy_def[1193] =
    {   0,
     1175,    1, 1176, 1176, 1177, 1177, 1178, 1178, 1179, 1179,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1180, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175,
     1175, 1175, 1175, 1175, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1175, 1175, 1175, 1181, 1181,
     1181, 1181, 1181, 1181, 1175, 1182, 1175, 1183, 1184, 1175,

     1175, 1185, 1175, 1175, 1186, 1187, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1188, 1175, 1175, 1175, 1188, 1188, 1188, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1189, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1175, 1182, 1183, 1183, 1175,
     1184, 1175, 1185, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1187, 1190, 1191, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1188, 1175,
     1175, 1188, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1189, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1192, 1175,
     1175, 1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1175, 1175, 1175, 1190, 1190, 1191, 1191, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1192, 1175, 1175,
     1175, 1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1175, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1175, 1175, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175, 1181, 1175,
     1190, 1191, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1175, 1175, 1175, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1175, 1175, 1175, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1175, 1181, 1190, 1191, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1175, 1181, 1175, 1175, 1175, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1175, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1175, 1175, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1175, 1181, 1181, 1175,
     1175, 1175, 1175, 1175, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1181, 1181, 1181, 1181, 1181, 1181, 1175, 1181, 1181, 1175,
     1181, 1181, 1181, 1181, 1175, 1175, 1181, 1181, 1181, 1175,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175, 1181,
     1175, 1175, 1175, 1181, 1181, 1181, 1181, 1181, 1175, 1175,
     1175, 1175, 1175, 1181, 1181, 1181, 1181, 1181, 1175, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1175,
     1175, 1175, 1181, 1181, 1181, 1175, 1175, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1175, 1181, 1181, 1175, 1181, 1175,
     1181, 1181, 1181, 1181, 1175, 1175, 1175, 1175, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1175, 1175, 1175, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1175, 1175, 1181, 1181, 1181, 1181,
     1181, 1181, 1175, 1181, 1181, 1175, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181,    0, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175

    } ;

static yyconst flex_int16_t yy_nxt[1862] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   48,   51,   52,   53,   54,   55,   56,
       48,   57,   58,   59,   60,   13,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   48,
       74,   75,   76,   77,   78,   48,   79,   80,   81,   82,
       83,   84,   85,   48,   86,   87,   88,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   89,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   90,   91,   92,   93,   94,   95,   97,   97,  100,
      100,  103,  103,  107,  104,  104,  107,  158,   98,   98,
      101,  101,  109,  131,  109,  160,  269,  132,  174,  163,
      202,  159,  270,  175,  191,  192,  193,  214,  161,  164,
      165,  166,  176,  167,  168,  400,  169,  170,  171,  172,
      172,  172,  172,  172,  119,  120,  401,  177,  203,  178,
      178,  178,  178,  178,  105,  105,  194,  195,  196,  991,
      108,  133,  215,  108,  121,  179,  109,  111,  216,  112,

      197,  198,  113,  113,  114,  114,  115,  173,  224,  199,
      199,  199,  199,  199,  115,  115,  115,  115,  115,  115,
      200,  123,  205,  124,  179,  125,  217,  219,  227,  220,
      221,  126,  222,  239,  236,  127,  206,  225,  223,  244,
      228,  128,  240,  115,  116,  115,  115,  115,  115,  992,
      241,  129,  267,  130,  242,  177,  117,  178,  178,  178,
      178,  178,  268,  237,  207,  118,  134,  282,  245,  135,
      136,  137,  238,  179,  208,  138,  139,  283,  140,  141,
      142,  183,  370,  371,  271,  325,  143,  285,  144,  145,
      146,  209,  147,  272,  286,  210,  316,  993,  184,  180,

      317,  211,  179,  326,  185,  186,  261,  187,  262,  510,
      263,  181,  264,  265,  266,  511,  188,  279,  280,  148,
      182,  393,  149,  386,  212,  394,  189,  281,  231,  289,
      150,  287,  213,  151,  152,  153,  288,  290,  154,  232,
      387,  155,  291,  994,  156,  190,  395,  157,  273,  233,
      274,  275,  276,  396,  995,  277,  314,  234,  278,  183,
      247,  315,  235,  248,  249,  250,  292,  109,  251,  109,
      252,  253,  254,  255,  256,  293,  257,  258,  296,  259,
      294,  327,  260,  525,  297,  526,  298,  303,  299,  300,
      328,  304,  301,  305,  308,  302,  309,  339,  310,  321,

      306,  307,  340,  322,  323,  324,  330,  390,  311,  331,
      332,  333,  334,  312,  335,  346,  346,  346,  346,  347,
      678,  109,  360,  360,  360,  360,  383,  391,  388,  415,
      415,  415,  415,  679,  113,  113,  114,  114,  115,  416,
      416,  416,  416,  384,  385,  389,  115,  115,  115,  115,
      115,  115,  430,  397,  608,  504,  457,  348,  398,  458,
      362,  349,  431,  363,  364,  470,  459,  531,  350,  460,
      471,  505,  351,  532,  352,  115,  356,  115,  115,  115,
      115,  442,  357,  114,  114,  114,  114,  115,  358,  199,
      199,  199,  199,  199,  515,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  365,  484,  366,  474,
      485,  443,  516,  115,  115,  115,  115,  115,  115,  475,
      487,  996,  609,  476,  115,  115,  115,  115,  115,  115,
      477,  357,  763,  764,  518,  488,  367,  358,  368,  519,
      893,  528,  115,  115,  115,  115,  115,  115,  761,  357,
      359,  359,  115,  115,  115,  529,  997,  172,  172,  172,
      172,  172,  115,  115,  115,  115,  115,  115,  361,  361,
      361,  361,  361,  407,  410,  410,  410,  410,  410,  998,
      361,  361,  361,  361,  361,  361,  999,  534, 1000,  535,
      411,  115,  115,  115,  115,  115,  115,  540,  357,  433,

      536,  541,  407,  547,  577,  434,  548,  578,  579,  361,
      361,  361,  361,  361,  361,  710,  435,  874,  177,  411,
      178,  178,  178,  178,  178,  412,  552,  412,  711,  553,
      413,  413,  413,  413,  413,  875,  179,  417,  417,  417,
      417,  417, 1175,  554,  581, 1001,  414, 1175,  582,  417,
      417,  417,  417,  417,  417,  479,  339,  872,  571,  689,
      480,  340,  873,  690,  572,  179,  481,  573,  574,  868,
      575,  360,  360,  360,  360,  414,  576, 1002,  417,  417,
      417,  417,  417,  417,  562,  563, 1003,  564,  565,  566,
      567,  568,  569,  584,  584,  584,  584,  585,  585,  585,

      585,  585,  585,  115,  115,  115,  115,  115,  413,  413,
      413,  413,  413,  869, 1004,  115,  115,  115,  115,  115,
      115, 1005,  183,  359,  359,  115,  115,  115,  413,  413,
      413,  413,  413,  894, 1006,  115,  115,  115,  115,  115,
      115,  988,  989,  762,  115,  115,  115,  115,  115,  115,
      590,  357,  856,  591,  592,  416,  416,  416,  416,  627,
      627,  627,  627,  627,  115,  115,  115,  115,  115,  115,
     1007,  357,  361,  361,  361,  361,  361,  410,  410,  410,
      410,  410, 1008, 1009,  361,  361,  361,  361,  361,  361,
     1010,  739, 1011,  623,  695,  857,  593,  740,  594,  620,

     1012,  620, 1013, 1014,  621,  621,  621,  621,  621,  696,
      697, 1015, 1016,  361,  361,  361,  361,  361,  361, 1017,
      622, 1018,  623, 1019, 1020,  624,  595,  624,  596, 1021,
      625,  625,  625,  625,  625,  412, 1022,  412, 1023, 1024,
      413,  413,  413,  413,  413, 1025,  626, 1026, 1027,  622,
      417,  417,  417,  417,  417,  760,  760,  760,  760,  585,
     1028, 1029,  417,  417,  417,  417,  417,  417,  585,  585,
      585,  585,  585, 1030, 1031,  626,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  625,  625,  625,  625,
      625,  417,  417,  417,  417,  417,  417,  620, 1032,  620,

     1033, 1034,  621,  621,  621,  621,  621,  775, 1035,  775,
     1036, 1037,  776,  776,  776,  776,  776,  625,  625,  625,
      625,  625, 1038, 1039,  624, 1040,  624, 1041,  777,  625,
      625,  625,  625,  625,  627,  627,  627,  627,  627,  837,
     1042, 1043, 1044, 1045,  838,  585,  585,  585,  585,  585,
      839,  776,  776,  776,  776,  776, 1046,  777,  776,  776,
      776,  776,  776,  775, 1047,  775, 1048, 1049,  776,  776,
      776,  776,  776, 1050, 1051, 1052, 1053, 1053, 1053, 1053,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072,

     1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093,
     1053, 1053, 1053, 1053, 1053, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109,
      778, 1110, 1103, 1111, 1112, 1113, 1114, 1115, 1116, 1116,
     1116, 1116, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1116, 1116,
     1116, 1116, 1116, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1146, 1146, 1146,
     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,

     1156, 1146, 1146, 1146, 1146, 1146, 1157, 1158, 1159, 1160,
     1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
     1171, 1172, 1173, 1174,  990,  589, 1092,  587,  987,  986,
      985,  984,  983,  982,  981,  980,  979,  978,  977,  976,
      975,  974,  973,  972,  971,  970,  969,  968,  967,  966,
      965,  964,  963,  962,  961,  960,  959,  958,  957,  956,
      955,  954,  953,  952,  951,  950,  949,  948,  947,  946,
      945,  944,  943,  942, 1132,   96,   96,   96,   96,   96,
       96,   96,   96,   99,   99,   99,   99,   99,   99,   99,
       99,  102,  102,  102,  102,  102,  102,  102,  102,  106,

      106,  106,  106,  106,  106,  106,  106,  122,  941,  940,
      122,  201,  201,  337,  939,  337,  337,  938,  337,  337,
      337,  338,  937,  338,  338,  338,  338,  338,  338,  341,
      341,  341,  341,  936,  341,  341,  341,  343,  935,  934,
      343,  343,  343,  343,  343,  345,  345,  345,  345,  345,
      345,  345,  345,  353,  933,  353,  353,  353,  353,  353,
      369,  369,  408,  408,  408,  408,  408,  408,  408,  408,
      586,  586,  586,  586,  932,  586,  586,  586,  588,  588,
      588,  588,  931,  588,  588,  588,  628,  628,  628,  628,
      628,  628,  628,  628,  930,  929,  928,  927,  926,  925,

      924,  923,  922,  921,  920,  919,  918,  917,  916,  915,
      914,  913,  912,  911,  910,  909,  908,  907,  906,  905,
      904,  903,  902,  901,  900,  899,  898,  897,  896,  895,
      892,  891,  890,  889,  888,  887,  886,  885,  884,  883,
      882,  881,  880,  879,  878,  877,  876,  871,  870,  867,
      866,  865,  864,  863,  862,  861,  860,  859,  858,  855,
      854,  853,  852,  851,  850,  849,  848,  847,  846,  845,
      844,  843,  842,  841,  840,  836,  835,  834,  833,  832,
      831,  830,  829,  828,  827,  826,  825,  824,  823,  822,
      821,  820,  819,  818,  817,  816,  815,  814,  813,  812,

      811,  810,  809,  808,  807,  806,  805,  804,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  793,  792,
      791,  790,  789,  788,  787,  786,  785,  784,  783,  782,
      781,  780,  779,  629,  774,  773,  772,  771,  770,  769,
      768,  767,  766,  765,  762,  589,  761,  587,  759,  758,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  745,  744,  743,  742,  741,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  709,  708,  707,  706,  705,  704,

      703,  702,  701,  700,  699,  698,  694,  693,  692,  691,
      688,  687,  686,  685,  684,  683,  682,  681,  680,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  409,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,
      589,  587,  342,  583,  580,  570,  561,  560,  559,  558,

      557,  556,  555,  551,  550,  549,  546,  545,  544,  543,
      542,  539,  538,  537,  533,  530,  527,  524,  523,  522,
      521,  520,  517,  514,  513,  512,  509,  508,  507,  506,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  486,  483,  482,  478,  473,
      472,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  441,  440,  439,  438,  437,  436,  432,
      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  409,  406,  405,  404,  403,  402,  399,  392,

      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  355,  354,  344,  342,  336,  329,  320,  319,  318,
      313,  295,  284,  246,  243,  230,  229,  226,  218,  204,
      162,  110, 1175,   11, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175
    } ;

static yyconst flex_int16_t yy_chk[1862] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        6,    7,    8,    9,    7,    8,   10,   24,    3,    4,
        5,    6,   13,   20,   13,   25,   67,   20,   29,   27,
       39,   24,   67,   29,   34,   34,   34,   43,   25,   27,
       27,   27,   29,   28,   28,  153,   28,   28,   28,   28,
       28,   28,   28,   28,   19,   19,  153,   31,   39,   31,
       31,   31,   31,   31,    7,    8,   35,   35,   35,  898,
        9,   20,   43,   10,   19,   31,   13,   17,   44,   17,

       36,   36,   17,   17,   17,   17,   17,   28,   47,   38,
       38,   38,   38,   38,   17,   17,   17,   17,   17,   17,
       38,   19,   41,   19,   31,   19,   44,   46,   50,   46,
       46,   19,   46,   55,   54,   19,   41,   47,   46,   58,
       50,   19,   55,   17,   17,   17,   17,   17,   17,  899,
       56,   19,   66,   19,   56,   30,   17,   30,   30,   30,
       30,   30,   66,   54,   41,   17,   21,   71,   58,   21,
       21,   21,   54,   30,   41,   21,   21,   71,   21,   21,
       21,   31,  125,  125,   68,   91,   21,   73,   21,   21,
       21,   42,   21,   68,   73,   42,   83,  900,   32,   30,

       83,   42,   30,   91,   32,   32,   65,   32,   65,  281,
       65,   30,   65,   65,   65,  281,   32,   70,   70,   21,
       30,  149,   21,  145,   42,  149,   32,   70,   53,   75,
       21,   74,   42,   21,   21,   21,   74,   75,   21,   53,
      145,   21,   75,  901,   21,   32,  150,   21,   69,   53,
       69,   69,   69,  150,  902,   69,   82,   53,   69,   30,
       63,   82,   53,   63,   63,   63,   76,  109,   63,  109,
       63,   63,   63,   63,   63,   76,   63,   63,   78,   63,
       76,   92,   63,  293,   78,  293,   78,   79,   78,   78,
       92,   79,   78,   79,   80,   78,   80,   98,   80,   90,

       79,   79,   98,   90,   90,   90,   94,  147,   80,   94,
       94,   94,   94,   80,   94,  105,  105,  105,  105,  105,
      478,  109,  117,  117,  117,  117,  144,  147,  146,  180,
      180,  415,  415,  478,  113,  113,  113,  113,  113,  181,
      181,  181,  181,  144,  144,  146,  113,  113,  113,  113,
      113,  113,  209,  151,  395,  276,  236,  105,  151,  236,
      120,  105,  209,  120,  120,  247,  237,  298,  105,  237,
      247,  276,  105,  298,  105,  113,  113,  113,  113,  113,
      113,  219,  113,  114,  114,  114,  114,  114,  113,  199,
      199,  199,  199,  199,  285,  114,  114,  114,  114,  114,

      114,  115,  115,  115,  115,  115,  120,  256,  120,  250,
      256,  219,  285,  115,  115,  115,  115,  115,  115,  250,
      258,  906,  395,  251,  114,  114,  114,  114,  114,  114,
      251,  114,  590,  590,  287,  258,  120,  114,  120,  287,
      761,  295,  115,  115,  115,  115,  115,  115,  761,  115,
      116,  116,  116,  116,  116,  295,  908,  172,  172,  172,
      172,  172,  116,  116,  116,  116,  116,  116,  118,  118,
      118,  118,  118,  172,  177,  177,  177,  177,  177,  909,
      118,  118,  118,  118,  118,  118,  910,  300,  911,  300,
      177,  116,  116,  116,  116,  116,  116,  304,  116,  212,

      300,  304,  172,  310,  333,  212,  310,  333,  333,  118,
      118,  118,  118,  118,  118,  507,  212,  738,  178,  177,
      178,  178,  178,  178,  178,  179,  314,  179,  507,  314,
      179,  179,  179,  179,  179,  738,  178,  182,  182,  182,
      182,  182,  338,  314,  335,  915,  179,  338,  335,  182,
      182,  182,  182,  182,  182,  253,  339,  737,  332,  489,
      253,  339,  737,  489,  332,  178,  253,  332,  332,  734,
      332,  360,  360,  360,  360,  179,  332,  917,  182,  182,
      182,  182,  182,  182,  330,  330,  919,  330,  330,  330,
      330,  330,  330,  346,  346,  346,  346,  346,  347,  347,

      347,  347,  347,  356,  356,  356,  356,  356,  412,  412,
      412,  412,  412,  734,  920,  356,  356,  356,  356,  356,
      356,  922,  178,  359,  359,  359,  359,  359,  413,  413,
      413,  413,  413,  762,  924,  359,  359,  359,  359,  359,
      359,  892,  892,  762,  356,  356,  356,  356,  356,  356,
      362,  356,  722,  362,  362,  416,  416,  416,  416,  418,
      418,  418,  418,  418,  359,  359,  359,  359,  359,  359,
      925,  359,  361,  361,  361,  361,  361,  410,  410,  410,
      410,  410,  929,  930,  361,  361,  361,  361,  361,  361,
      931,  541,  933,  410,  494,  722,  362,  541,  362,  407,

      934,  407,  935,  936,  407,  407,  407,  407,  407,  494,
      494,  937,  938,  361,  361,  361,  361,  361,  361,  939,
      407,  940,  410,  941,  946,  411,  362,  411,  362,  947,
      411,  411,  411,  411,  411,  414,  948,  414,  951,  952,
      414,  414,  414,  414,  414,  953,  411,  954,  956,  407,
      417,  417,  417,  417,  417,  584,  584,  584,  584,  584,
      957,  958,  417,  417,  417,  417,  417,  417,  585,  585,
      585,  585,  585,  959,  960,  411,  620,  620,  620,  620,
      620,  621,  621,  621,  621,  621,  624,  624,  624,  624,
      624,  417,  417,  417,  417,  417,  417,  622,  961,  622,

      963,  965,  622,  622,  622,  622,  622,  623,  966,  623,
      969,  970,  623,  623,  623,  623,  623,  625,  625,  625,
      625,  625,  971,  972,  626,  974,  626,  975,  623,  626,
      626,  626,  626,  626,  627,  627,  627,  627,  627,  704,
      977,  978,  979,  981,  704,  760,  760,  760,  760,  760,
      704,  775,  775,  775,  775,  775,  982,  623,  776,  776,
      776,  776,  776,  777,  983,  777,  984,  985,  777,  777,
      777,  777,  777,  986,  990,  992,  994,  994,  994,  994,
      994,  995,  996,  997, 1000, 1002, 1005, 1006, 1007, 1009,
     1010, 1011, 1012, 1013, 1018, 1019, 1020, 1022, 1023, 1027,

     1028, 1029, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1041, 1042, 1043, 1044, 1046, 1047, 1048, 1051, 1053, 1054,
     1053, 1053, 1053, 1053, 1053, 1057, 1058, 1060, 1062, 1064,
     1065, 1066, 1067, 1068, 1070, 1072, 1075, 1077, 1079, 1080,
      627, 1084, 1068, 1085, 1086, 1088, 1089, 1090, 1091, 1091,
     1091, 1091, 1091, 1092, 1096, 1098, 1099, 1100, 1102, 1103,
     1104, 1107, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1116,
     1116, 1116, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124,
     1126, 1127, 1128, 1129, 1130, 1132, 1133, 1133, 1133, 1133,
     1133, 1134, 1135, 1137, 1138, 1140, 1141, 1142, 1143, 1144,

     1145, 1146, 1146, 1146, 1146, 1146, 1147, 1150, 1151, 1152,
     1155, 1157, 1158, 1160, 1162, 1163, 1164, 1165, 1166, 1167,
     1168, 1169, 1170, 1171,  897,  894, 1053,  893,  891,  889,
      888,  887,  886,  884,  883,  882,  881,  880,  879,  877,
      876,  875,  874,  873,  872,  870,  869,  868,  867,  866,
      865,  863,  862,  861,  860,  859,  858,  854,  853,  852,
      851,  850,  849,  848,  847,  846,  845,  844,  840,  839,
      838,  837,  836,  835, 1116, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180,  834,  833,
     1180, 1181, 1181, 1182,  832, 1182, 1182,  831, 1182, 1182,
     1182, 1183,  830, 1183, 1183, 1183, 1183, 1183, 1183, 1184,
     1184, 1184, 1184,  829, 1184, 1184, 1184, 1185,  828,  827,
     1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1187,  826, 1187, 1187, 1187, 1187, 1187,
     1188, 1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1190, 1190, 1190, 1190,  825, 1190, 1190, 1190, 1191, 1191,
     1191, 1191,  824, 1191, 1191, 1191, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192,  823,  822,  821,  820,  817,  815,

      814,  813,  812,  811,  810,  809,  805,  804,  803,  802,
      801,  800,  796,  795,  794,  793,  792,  791,  789,  788,
      787,  786,  785,  778,  773,  772,  769,  768,  767,  766,
      759,  758,  757,  756,  755,  754,  753,  752,  751,  750,
      749,  748,  745,  743,  741,  740,  739,  736,  735,  733,
      731,  730,  729,  728,  727,  726,  725,  724,  723,  721,
      720,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  703,  702,  701,  699,  698,
      697,  696,  695,  694,  693,  692,  690,  689,  688,  687,
      686,  685,  684,  682,  680,  679,  678,  677,  676,  675,

      674,  673,  672,  670,  669,  667,  665,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  652,  651,  650,  649,
      648,  644,  643,  641,  640,  639,  638,  637,  636,  633,
      632,  631,  630,  628,  618,  617,  616,  613,  612,  611,
      610,  609,  607,  606,  589,  588,  587,  586,  561,  560,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  540,  539,  538,
      537,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      525,  522,  521,  519,  518,  517,  516,  515,  514,  513,
      512,  510,  509,  508,  506,  505,  504,  503,  502,  501,

      500,  499,  498,  497,  496,  495,  493,  492,  491,  490,
      488,  487,  486,  485,  484,  482,  481,  480,  479,  477,
      475,  474,  473,  472,  471,  470,  468,  467,  466,  465,
      464,  463,  462,  460,  459,  458,  457,  456,  455,  454,
      453,  451,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  427,  426,  425,  422,  421,  420,  419,  408,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  394,
      393,  391,  389,  387,  385,  384,  382,  380,  376,  373,
      355,  354,  341,  336,  334,  331,  325,  322,  319,  318,

      317,  316,  315,  313,  312,  311,  309,  308,  307,  306,
      305,  303,  302,  301,  299,  296,  294,  292,  291,  290,
      289,  288,  286,  284,  283,  282,  280,  279,  278,  277,
      275,  274,  273,  271,  270,  269,  268,  267,  265,  264,
      263,  262,  261,  260,  259,  257,  255,  254,  252,  249,
      248,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      235,  233,  232,  231,  229,  228,  227,  226,  224,  223,
      222,  221,  220,  218,  217,  216,  215,  214,  213,  210,
      208,  207,  206,  205,  204,  203,  202,  190,  189,  188,
      184,  183,  175,  170,  157,  156,  155,  154,  152,  148,

      143,  142,  141,  140,  139,  138,  137,  136,  135,  134,
      128,  112,  111,  104,   99,   95,   93,   87,   85,   84,
       81,   77,   72,   59,   57,   52,   51,   49,   45,   40,
       26,   15,   11, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,

     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "input_lexer.ll"
/* -*- mode: C++; compile-command: "flex input_lexer.ll && make input_lexer.o " -*- */
/** @file input_lexer.ll
 *
 *  Lexical analyzer definition for reading expressions.
 *  Note Maple input should be processed replacing # with // and { } for set
 *  This file must be processed with flex. */
/*
 *  Copyright (C) 2001,10 B. Parisse, Institut Fourier, 38402 St Martin d'Heres
 *  The very first version was inspired by GiNaC lexer
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
/*
 * The lexer will first check for static patterns and strings (defined below)
 * If a match is not found, it calls find_or_make_symbol
 * This function looks first if the string should be translated
 * (e.g. add a prefix from the export table)
 * then look in lexer_functions for a match, then look in sym_tab
 * if not found in sym_tab, a new identificateur is created & added in sym_tab
 * Functions in lexer_functions are added during the construction
 * of the corresponding unary_functions using lexer_functions_register
 */
/*
 *  Definitions
 */
#line 45 "input_lexer.ll"
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "first.h"
#include <iostream>
#include <stdexcept>

#include "gen.h"
#include "input_lexer.h"
#include "help.h"
#include "identificateur.h"
#include "usual.h"
#include "derive.h"
#include "series.h"
#include "intg.h"
#include "sym2poly.h"
#include "moyal.h"
#include "subst.h"
#include "vecteur.h"
#include "modpoly.h"
#include "lin.h"
#include "solve.h"
#include "ifactor.h"
#include "alg_ext.h"
#include "gauss.h"
#include "isom.h"
#include "plot.h"
#include "prog.h"
#include "rpn.h"
#include "ezgcd.h"
#include "tex.h"
#include "risch.h"
#include "input_parser.h"    

#if defined(RTOS_THREADX) || defined(__MINGW_H)
  int isatty (int ){ return 0; }
#endif

  using namespace std;
  using namespace giac;
  void giac_yyset_column (int  column_no , yyscan_t yyscanner);
  int giac_yyget_column (yyscan_t yyscanner);
#define YY_USER_ACTION giac_yyset_column(giac_yyget_column(yyscanner)+yyleng,yyscanner);
#define YY_USER_INIT giac_yyset_column(1,yyscanner);

#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC

    const char invalid_name[]="Invalid name";
    void increment_lexer_line_number_setcol(yyscan_t yyscanner,GIAC_CONTEXT){
      giac_yyset_column(1,yyscanner);
      increment_lexer_line_number(contextptr);
    }
    bool doing_insmod = false;

    sym_tab & syms(){
      static sym_tab * ans=new sym_tab;
      return * ans;
    }

    bool builtin_lexer_functions_sorted = false;

    map_charptr_gen & lexer_functions(){
      static map_charptr_gen * ans=0;
      if (!ans){
	ans = new map_charptr_gen;
	doing_insmod=false;
	builtin_lexer_functions_sorted=false;
      }
      return * ans;
    }


#ifdef STATIC_BUILTIN_LEXER_FUNCTIONS
    // gen alias for static initialization on 32 bits processor
    struct charptr_gen_unary {
      const char * s;
      unsigned char type;  // see dispatch.h
      signed char subtype;
      unsigned short reserved; 
      unsigned long _FUNC_; // unary_function_ptr *
    };

    const charptr_gen_unary builtin_lexer_functions[] ={
#if defined(GIAC_HAS_STO_38) && defined(CAS38_DISABLED)
#include "static_lexer_38.h"
#else
#include "static_lexer.h"
#endif
    };

    // return true/false to tell if s is recognized. return the appropriate gen if true
    bool CasIsBuildInFunction(char const *s, gen &g){ 
      // binary search in builtin_lexer_functions
      int i=0, j=builtin_lexer_functions_number-1;
      int cmp;
      cmp= strcmp(s,builtin_lexer_functions[i].s);
      if (cmp==0) goto found; if (cmp<0) return false;
      cmp= strcmp(s,builtin_lexer_functions[j].s);
      if (cmp==0) { i=j; goto found; } if (cmp>0) return false;
      while (1){
        if (i+1>=j) return false;
        int mid= (i+j)/2;
        cmp= strcmp(s,builtin_lexer_functions[mid].s);
        if (cmp==0) { i=mid; goto found; } 
        if (cmp>0) i= mid; else j=mid;
      }
    found:
      g= gen(int(builtin_lexer_functions_[i]+builtin_lexer_functions[i]._FUNC_));
      g= gen(*g._FUNCptr);
      return true;
    }

    // Array added because GH compiler stores builtin_lexer_functions in RAM
    const unsigned long builtin_lexer_functions_[]={
#if defined(GIAC_HAS_STO_38) && defined(CAS38_DISABLED)
#include "static_lexer_38_.h"
#else
#include "static_lexer_.h"
#endif
    };

    const unsigned builtin_lexer_functions_number=sizeof(builtin_lexer_functions)/sizeof(charptr_gen_unary);

    charptr_gen * builtin_lexer_functions_begin(){
      return (charptr_gen *) builtin_lexer_functions;
    }

    charptr_gen * builtin_lexer_functions_end(){
      return builtin_lexer_functions_begin()+builtin_lexer_functions_number;
    }

#else
    unsigned builtin_lexer_functions_number;
    charptr_gen * builtin_lexer_functions(){
      static charptr_gen * ans=0;
      if (!ans){
	ans = new charptr_gen[1400];
	builtin_lexer_functions_number=0;
      }
      return ans;
    }

    charptr_gen * builtin_lexer_functions_begin(){
      return builtin_lexer_functions();
    }

    charptr_gen * builtin_lexer_functions_end(){
      return builtin_lexer_functions()+builtin_lexer_functions_number;
    }

    const unsigned long * const builtin_lexer_functions_=0;
    
#endif

    std::vector<int> & lexer_localization_vector(){
      static std::vector<int> * ans=new  std::vector<int>;
      return *ans;
    }

    std::map<std::string,std::string> & lexer_localization_map(){
      static std::map<std::string,std::string> * ans = new std::map<std::string,std::string>;
      return * ans;
    }
    std::multimap<std::string,giac::localized_string> & back_lexer_localization_map(){
      static std::multimap<std::string,giac::localized_string> * ans= new std::multimap<std::string,giac::localized_string>;
      return * ans;
    }

    // lexer_localization_vector() is the list of languages currently translated
    // lexer_localization_map translates keywords from the locale to giac 
    // back_lexer_localization_map() lists for a giac keyword the translations

    std::map<std::string,std::vector<std::string> > & lexer_translator (){
      static std::map<std::string,std::vector<std::string> > * ans = new std::map<std::string,std::vector<std::string> >;
      return * ans;
    }
    // lexer_translator will be updated when export/with is called
    // To each string (w/o ::) in a given library, 
    // If it exists, we push_back the full string (with ::)
    // If not we create a vector with the full string
    // If a library is unexported we remove the corresponding entry in the 
    // vector and remove the entry if the vector is empty
    std::map<std::string,std::vector<std::string> > & library_functions (){
      static std::map<std::string,std::vector<std::string> > * ans=new std::map<std::string,std::vector<std::string> >;
      return *ans;
    }

    // First string is the library name, second is the vector of function names
    // User defined relations
    vector<user_function> & registered_lexer_functions(){
      static vector<user_function> * ans = 0;
      if (!ans){
	ans = new vector<user_function>;
	// ans->reserve(50);
      }
      return * ans;
    }

    /* integer values */
    struct lexer_tab_int_type {
      const char * keyword;
      unsigned char status;
      int value;
      signed char subtype;
      short int return_value;
    };

    bool tri1(const lexer_tab_int_type & a,const lexer_tab_int_type & b){
      int res= strcmp(a.keyword,b.keyword);
      return res<0;
    }

    bool tri2(const char * a,const char * b){
      return strcmp(a,b)<0;
    }

    const lexer_tab_int_type lexer_tab_int_values []={
#ifdef GIAC_HAS_STO_38
#include "lexer_tab38_int.h"
#else
#include "lexer_tab_int.h"
#endif
    };

    const lexer_tab_int_type * const lexer_tab_int_values_begin = lexer_tab_int_values;
    const unsigned lexer_tab_int_values_n=sizeof(lexer_tab_int_values)/sizeof(lexer_tab_int_type);
    const lexer_tab_int_type * const lexer_tab_int_values_end = lexer_tab_int_values+lexer_tab_int_values_n;
#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC

/* Abbreviations */
/* If changed, modify isalphan in help.cc FIXME is . allowed inside alphanumeric ? answer NO */




/*
 *  Lexical rules
 */
#line 1523 "input_lexer.cc"

#define INITIAL 0
#define comment 1
#define comment_hash 2
#define str 3
#define backquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int giac_yylex_init (yyscan_t* scanner);

int giac_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int giac_yylex_destroy (yyscan_t yyscanner );

int giac_yyget_debug (yyscan_t yyscanner );

void giac_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE giac_yyget_extra (yyscan_t yyscanner );

void giac_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *giac_yyget_in (yyscan_t yyscanner );

void giac_yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *giac_yyget_out (yyscan_t yyscanner );

void giac_yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t giac_yyget_leng (yyscan_t yyscanner );

char *giac_yyget_text (yyscan_t yyscanner );

int giac_yyget_lineno (yyscan_t yyscanner );

void giac_yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * giac_yyget_lval (yyscan_t yyscanner );

void giac_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int giac_yywrap (yyscan_t yyscanner );
#else
extern int giac_yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int giac_yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int giac_yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 300 "input_lexer.ll"


#line 1763 "input_lexer.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			giac_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		giac_yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1176 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1734 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 302 "input_lexer.ll"
/* skip whitespace */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 303 "input_lexer.ll"
increment_lexer_line_number_setcol(yyscanner,yyextra); //cerr << "Scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
/* Strings */
/* \"[^\"]*\"        yylval = string2gen( giac_yytext); return T_STRING; */
case 3:
YY_RULE_SETUP
#line 306 "input_lexer.ll"
BEGIN(str); comment_s("",yyextra);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 307 "input_lexer.ll"
increment_comment_s('"',yyextra);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 308 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
                  (*yylval)=string2gen(comment_s(yyextra),false); 
                  return T_STRING; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 311 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 312 "input_lexer.ll"
{
                   /* octal escape sequence */
                   int result;
                   (void) sscanf( yytext + 1, "%o", &result );
                   increment_comment_s(char(result & 0xff),yyextra);
                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 318 "input_lexer.ll"
{
                   /* generate error - bad escape sequence; something
                    * like '\48' or '\0777777'
                    */
                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 323 "input_lexer.ll"
increment_comment_s('\n',yyextra);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 324 "input_lexer.ll"
increment_comment_s('\t',yyextra);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 325 "input_lexer.ll"
increment_comment_s('\r',yyextra);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 326 "input_lexer.ll"
increment_comment_s('\b',yyextra);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 327 "input_lexer.ll"
increment_comment_s('\f',yyextra);
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 328 "input_lexer.ll"
increment_comment_s(yytext[1],yyextra);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 329 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 330 "input_lexer.ll"
if (rpn_mode(yyextra)){ index_status(yyextra)=0; return T_ACCENTGRAVE; } else { BEGIN(backquote); comment_s("",yyextra); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 331 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 332 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 333 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
  return find_or_make_symbol(comment_s(yyextra),(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 336 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 337 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);/* (*yylval) = string2gen('"'+string(giac_yytext).substr(2,string(giac_yytext).size()-3)+'"');   return T_COMMENT; */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 338 "input_lexer.ll"
BEGIN(comment); comment_s(yyextra)="";
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 340 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat anything that's not a '*' */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 341 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat up '*'s not followed by '/'s */
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 342 "input_lexer.ll"
comment_s(yyextra) += '\n'; increment_lexer_line_number_setcol(yyscanner,yyextra); cerr << "(Comment) scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 343 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; /* (*yylval) = string2gen(comment_s(yyextra),false); return T_COMMENT; */
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 344 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 345 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 347 "input_lexer.ll"
if (index_status(yyextra)) return T_INTERROGATION; if (calc_mode(yyextra)==1){ *yylval=undef; return T_SYMBOL;}  return T_HELP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 348 "input_lexer.ll"
opened_quote(yyextra) |= 2; return T_UNIT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 349 "input_lexer.ll"
if (opened_quote(yyextra) & 1) { opened_quote(yyextra) &= 0x7ffffffe; return T_QUOTE; } if (index_status(yyextra) && !in_rpn(yyextra) && xcas_mode(yyextra)!= 1) return T_PRIME; opened_quote(yyextra) |= 1; return T_QUOTE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 350 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return TI_SEMI; (*yylval)=0; return T_SEMI;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 351 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return T_SEMI; return TI_SEMI;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 352 "input_lexer.ll"
if (spread_formula(yyextra)) return T_DEUXPOINTS; if ( xcas_mode(yyextra)==3 ) { index_status(yyextra)=0; return TI_DEUXPOINTS; }  index_status(yyextra)=0; if (xcas_mode(yyextra)>0) { (*yylval)=1; return T_SEMI; } else return T_DEUXPOINTS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 353 "input_lexer.ll"
(*yylval)=1; return T_SEMI;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 354 "input_lexer.ll"
index_status(yyextra)=0;return T_DOUBLE_DEUX_POINTS;
	YY_BREAK
/* special values */
case 37:
YY_RULE_SETUP
#line 358 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=theta__IDNT_e; return T_SYMBOL;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 359 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra) > 0 || !i_sqrt_minus1(yyextra)) { (*yylval)=i__IDNT_e; return T_SYMBOL; } else { (*yylval) = cst_i; return T_LITERAL;};
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 360 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 361 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
/* \xef\xbd\x89            index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL; */
case 41:
YY_RULE_SETUP
#line 363 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 364 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra)==0 || xcas_mode(yyextra)==3 || rpn_mode(yyextra)) { return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } else { (*yylval) = cst_i; return T_LITERAL; };
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 365 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 366 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = symbolic(at_exp,1); return T_LITERAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 367 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 368 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 369 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 370 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 371 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 372 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_euler_gamma; return T_LITERAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 373 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 374 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 375 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 376 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 377 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 378 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 379 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = minus_inf; return T_LITERAL;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 380 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = undef; return T_LITERAL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 381 "input_lexer.ll"
return T_END_INPUT;
	YY_BREAK
/* integer values */
case 60:
YY_RULE_SETUP
#line 384 "input_lexer.ll"
if (xcas_mode(yyextra)==2){ (*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP; }  index_status(yyextra)=0; (*yylval) = _FUNC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 385 "input_lexer.ll"
if (xcas_mode(yyextra)==3) { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } index_status(yyextra)=0; (*yylval) = _MAPLE_LIST ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
/* vector/polynom/matrice delimiters */
case 62:
YY_RULE_SETUP
#line 389 "input_lexer.ll"
(*yylval) = _SEQ__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 390 "input_lexer.ll"
(*yylval) = _SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 391 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 392 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_BEGIN_PAR;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 393 "input_lexer.ll"
(*yylval) = _RPN_FUNC__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 394 "input_lexer.ll"
(*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 395 "input_lexer.ll"
(*yylval) = _LINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 396 "input_lexer.ll"
(*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 397 "input_lexer.ll"
(*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 398 "input_lexer.ll"
(*yylval) = _PNT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 399 "input_lexer.ll"
(*yylval) = _GGB__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 400 "input_lexer.ll"
(*yylval) = _POINT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 401 "input_lexer.ll"
(*yylval) = _CURVE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 402 "input_lexer.ll"
(*yylval) = _HALFLINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 403 "input_lexer.ll"
(*yylval) = _POLY1__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 404 "input_lexer.ll"
(*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 405 "input_lexer.ll"
(*yylval) = _SPREAD__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 406 "input_lexer.ll"
(*yylval) = _FOLDER__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 407 "input_lexer.ll"
(*yylval) = _POLYEDRE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 408 "input_lexer.ll"
(*yylval) = _RGBA__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 409 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 410 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 411 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2);  return T_TEST_EQUAL;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 412 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_TEST_EQUAL;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 413 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 414 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 415 "input_lexer.ll"
index_status(yyextra)=0; *yylval = 0; return T_BEGIN_PAR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 416 "input_lexer.ll"
index_status(yyextra)=1; return T_END_PAR;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 417 "input_lexer.ll"
if (index_status(yyextra)) { index_status(yyextra)=0; return T_INDEX_BEGIN; } else { (*yylval) = 0; return T_VECT_DISPATCH; } ;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 418 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 419 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _POLY1__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 420 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 421 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 422 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 423 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 424 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* geometric delimiters */
case 98:
YY_RULE_SETUP
#line 426 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 427 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 428 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LINE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 429 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 430 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 431 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 432 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _CURVE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 433 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* gen delimiters */
case 106:
YY_RULE_SETUP
#line 435 "input_lexer.ll"
index_status(yyextra)=0; if (rpn_mode(yyextra) ||calc_mode(yyextra)==1) { (*yylval)=0; return T_VECT_DISPATCH; } if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38){ (*yylval) = _LIST__VECT;  return T_VECT_DISPATCH; } if (xcas_mode(yyextra) > 0 ){ (*yylval)=_SET__VECT; return T_VECT_DISPATCH; } else return T_BLOC_BEGIN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 436 "input_lexer.ll"
index_status(yyextra)=1; if (rpn_mode(yyextra) || calc_mode(yyextra)==1) return T_VECT_END; if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38) return T_VECT_END; if (xcas_mode(yyextra) > 0) return T_VECT_END; else return T_BLOC_END;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 437 "input_lexer.ll"
index_status(yyextra)=0;  (*yylval)=_SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 438 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 439 "input_lexer.ll"
index_status(yyextra)=0; return T_ROOTOF_BEGIN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 440 "input_lexer.ll"
index_status(yyextra)=1; return T_ROOTOF_END;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 441 "input_lexer.ll"
index_status(yyextra)=0; return T_SPOLY1_BEGIN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 442 "input_lexer.ll"
index_status(yyextra)=1; return T_SPOLY1_END;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 443 "input_lexer.ll"
index_status(yyextra)=0; ++in_rpn(yyextra); return T_RPN_BEGIN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 444 "input_lexer.ll"
index_status(yyextra)=0; --in_rpn(yyextra); return T_RPN_END;
	YY_BREAK
/* binary operators */
case 116:
YY_RULE_SETUP
#line 447 "input_lexer.ll"
index_status(yyextra)=0; return T_MAPSTO;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 448 "input_lexer.ll"
(*yylval) = gen(at_couleur,2); index_status(yyextra)=0; return T_INTERVAL;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 449 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_TEST_EQUAL;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 450 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 451 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 452 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 453 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 454 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 455 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 456 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 457 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 458 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 459 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 460 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 461 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 462 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 463 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 464 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 465 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_EQUAL;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 466 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal2,2); return T_EQUAL;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 467 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 468 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); if (xcas_mode(yyextra)>0) return T_DOLLAR_MAPLE; else return T_DOLLAR;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 469 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_DOLLAR_MAPLE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 470 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 471 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 472 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_AFFECT;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 473 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 474 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 475 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 476 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 477 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 478 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_array_sto,2); return T_AFFECT;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 479 "input_lexer.ll"
index_status(yyextra)=1; yytext[0]='0'; (*yylval) = symb_double_deux_points(makevecteur(_IDNT_id_at,chartab2gen(yytext,yyextra))); return T_SYMBOL;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 480 "input_lexer.ll"
if (xcas_mode(yyextra)!=3) {index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_COMPOSE; } BEGIN(comment_hash);
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 481 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_POW;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 482 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 483 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 484 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 485 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 486 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 487 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 488 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 489 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 490 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 491 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_tilocal,2); return T_PIPE;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 492 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 493 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 494 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 495 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 496 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 497 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 498 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 499 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 500 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 501 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 502 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 503 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 504 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 505 "input_lexer.ll"
if (xcas_mode(yyextra) || index_status(yyextra)) { (*yylval)=gen(at_factorial); return T_FACTORIAL; } else { index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_NOT; }
	YY_BREAK
/* standard functions */
case 175:
YY_RULE_SETUP
#line 508 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=symbolic(at_Ans,0); return T_LITERAL;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 509 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 510 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_FACTORIAL;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 511 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_PLUS;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 512 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_FACTORIAL;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 513 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_PLUS;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 514 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointplus,2); return T_PLUS;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 515 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 516 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sqrt,2); return T_NOT;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 517 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 518 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=2; return T_SQ;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 519 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=3; return T_SQ;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 520 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=4; return T_SQ;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 521 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=5; return T_SQ;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 522 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=6; return T_SQ;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 523 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=7; return T_SQ;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 524 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=8; return T_SQ;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 525 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=9; return T_SQ;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 526 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=-1; return T_SQ;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 527 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=-1; return T_SQ;
	YY_BREAK
/* "','"                   index_status(yyextra)=0; (*yylval)=gen(at_makevector,2); return T_QUOTED_BINARY; commented because of f('a','b') */
case 195:
YY_RULE_SETUP
#line 529 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 530 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 531 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return (calc_mode(yyextra)==38)?T_MOINS38:T_MOINS;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 532 "input_lexer.ll"
index_status(yyextra)=0; if (calc_mode(yyextra)==38){ (*yylval)=gen(at_neg,2); return T_NEG38; } else { cerr << 1 << endl; (*yylval)=gen(at_binary_minus,2); return T_MOINS;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 533 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointminus,2); return T_PLUS;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 534 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 535 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 536 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_FOIS;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 537 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_cross,2); return T_FOIS;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 538 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_multcrement,1); return T_FOIS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 539 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){return T_DOUBLE_DEUX_POINTS; } else {(*yylval)=gen(at_prod,2); return T_FOIS;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 540 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ampersand_times,2); return T_FOIS;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 541 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_quote_pow,2); return T_POW;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 542 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointprod,2); return T_FOIS;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 543 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 544 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 545 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_DIV;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 546 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_divcrement,1); return T_DIV;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 547 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointdivision,2); return T_DIV;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 548 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 549 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 550 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){ (*yylval)=gen(at_PERCENT); return T_UNARY_OP_38; } if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_pourcent); return T_FACTORIAL; } if (xcas_mode(yyextra)==1) { (*yylval)=symbolic(at_ans,vecteur(0)); return T_NUMBER; }  if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 551 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_iquorem,2); return T_MOD;} (*yylval)=symbolic(at_ans,-2); return T_NUMBER; 
	YY_BREAK
/* \xe2\x88\xa1             index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD; */
case 218:
YY_RULE_SETUP
#line 553 "input_lexer.ll"
if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_quorem,2); return T_MOD;} index_status(yyextra)=0; (*yylval)=symbolic(at_ans,-3); return T_NUMBER; 
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 554 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 555 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_irem,2); return T_UNARY_OP; } else { if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 556 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 557 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
/* "MOD"                   index_status(yyextra)=0; return T_MOD; */
case 223:
YY_RULE_SETUP
#line 559 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 560 "input_lexer.ll"
(*yylval) = gen(at_pow,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 561 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 562 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointpow,2); return T_POW;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 563 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 564 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 565 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 566 "input_lexer.ll"
(*yylval) = gen(at_HDigits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 567 "input_lexer.ll"
(*yylval) = gen(at_HAngle,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 568 "input_lexer.ll"
(*yylval) = gen(at_HFormat,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 569 "input_lexer.ll"
(*yylval) = gen(at_HComplex,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 570 "input_lexer.ll"
(*yylval) = gen(at_HLanguage,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 571 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 572 "input_lexer.ll"
(*yylval) = gen(at_threads,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 573 "input_lexer.ll"
(*yylval) = gen(at_scientific_format,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 574 "input_lexer.ll"
(*yylval) = gen(at_angle_radian,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 575 "input_lexer.ll"
(*yylval) = gen(at_approx_mode,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 576 "input_lexer.ll"
(*yylval) = gen(at_all_trig_solutions,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 577 "input_lexer.ll"
(*yylval) = gen(at_ntl_on,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 578 "input_lexer.ll"
(*yylval) = gen(at_complex_mode,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 579 "input_lexer.ll"
(*yylval) = gen(at_complex_variables,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 580 "input_lexer.ll"
(*yylval) = gen(at_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 581 "input_lexer.ll"
(*yylval) = gen(at_proba_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 583 "input_lexer.ll"
(*yylval) = gen(at_acos,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 584 "input_lexer.ll"
(*yylval) = gen(at_randNorm,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 585 "input_lexer.ll"
(*yylval) = gen(at_acosh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 586 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_args,0); return T_QUOTED_BINARY;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 587 "input_lexer.ll"
(*yylval) = gen(at_asin,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 588 "input_lexer.ll"
(*yylval) = gen(at_asinh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 589 "input_lexer.ll"
(*yylval) = gen(at_at,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 590 "input_lexer.ll"
(*yylval) = gen(at_atan,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 591 "input_lexer.ll"
(*yylval) = gen(at_atanh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 592 "input_lexer.ll"
(*yylval) = gen(at_backquote,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 593 "input_lexer.ll"
(*yylval) = gen(at_bloc,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 594 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_break,0); return T_BREAK;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 595 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38) return T_CASE38; else return T_CASE;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 596 "input_lexer.ll"
(*yylval) = gen(at_cont,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 597 "input_lexer.ll"
(*yylval) = gen(at_debug,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 598 "input_lexer.ll"
(*yylval) = gen(at_derive,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 599 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval) = gen(at_function_diff,1); index_status(yyextra)=1; return T_UNARY_OP;} else { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 600 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval)=e__IDNT_e; }else (*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 601 "input_lexer.ll"
(*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 602 "input_lexer.ll"
(*yylval) = gen(at_equal,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 603 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 604 "input_lexer.ll"
(*yylval) = gen(at_erase,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 605 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 606 "input_lexer.ll"
if (xcas_mode(yyextra)==3) (*yylval)=gen(at_partfrac); else (*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 607 "input_lexer.ll"
(*yylval) = gen(at_insmod,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 608 "input_lexer.ll"
(*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 609 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 610 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 611 "input_lexer.ll"
(*yylval) = gen(at_halt,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 612 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=4; return T_BLOC_END;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 613 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=9; return T_BLOC_END;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 614 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=3; return T_BLOC_END;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 615 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 616 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); if (rpn_mode(yyextra)) return T_RPN_IF; return T_IF; 
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 617 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IFTE;
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 618 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_when,3); return T_IFTE;
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 619 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 620 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 621 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 622 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_ifactors); else (*yylval) = gen(at_ifactors,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 623 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 624 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 625 "input_lexer.ll"
(*yylval) = gen(at_kill,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 626 "input_lexer.ll"
(*yylval) = gen(at_ln,1); index_status(yyextra)=1; return T_UNARY_OP; /* index_status(yyextra)=1 to accept log[] for a basis log */
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 627 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 628 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 629 "input_lexer.ll"
(*yylval) = gen(at_not,1); if (xcas_mode(yyextra)) return T_NOT;  index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 630 "input_lexer.ll"
(*yylval) = gen(at_not,1); return T_NOT;  
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 631 "input_lexer.ll"
(*yylval) = gen(at_neg,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 632 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 633 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 634 "input_lexer.ll"
(*yylval) = gen(at_greduce,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 635 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_of,2); return T_QUOTED_BINARY;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 636 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_op,1); else (*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 637 "input_lexer.ll"
(*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 638 "input_lexer.ll"
(*yylval)=2; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 639 "input_lexer.ll"
(*yylval) = gen(at_pcoeff,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 640 "input_lexer.ll"
(*yylval) = gen(at_funcplot,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 641 "input_lexer.ll"
(*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 642 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 643 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 644 "input_lexer.ll"
if (rpn_mode(yyextra)) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 645 "input_lexer.ll"
(*yylval) = gen(at_srand,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 646 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 647 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 648 "input_lexer.ll"
(*yylval) = gen(at_for,1) ;index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 649 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 650 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 651 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 652 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_QUOTED_BINARY;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 653 "input_lexer.ll"
(*yylval) = gen(at_maple_root,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 654 "input_lexer.ll"
(*yylval) = gen(at_same,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 655 "input_lexer.ll"
(*yylval) = gen(at_sst,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 656 "input_lexer.ll"
(*yylval) = gen(at_sst_in,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 657 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subs,2); else (*yylval) = gen(at_subs,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 658 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subsop,2); else (*yylval) = gen(at_subsop,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 659 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 660 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 661 "input_lexer.ll"
(*yylval) = gen(at_virgule,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 662 "input_lexer.ll"
(*yylval) = gen(at_VARS,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 663 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); if (xcas_mode(yyextra)==3) return TI_WHILE; if (xcas_mode(yyextra)!=0) return T_MUPMAP_WHILE; return T_WHILE;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 664 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_MUPMAP_WHILE; /* return T_RPN_WHILE; */
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 665 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 666 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 667 "input_lexer.ll"
(*yylval) = gen(at_Text,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 668 "input_lexer.ll"
(*yylval) = gen(at_DropDown,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 669 "input_lexer.ll"
(*yylval) = gen(at_Popup,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 670 "input_lexer.ll"
(*yylval) = gen(at_Request,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 671 "input_lexer.ll"
(*yylval) = gen(at_Title,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 672 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 673 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 674 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 675 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 676 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 677 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_breakpoint,0); return T_BREAK;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 678 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_LOOP;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 679 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_FOR;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 680 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_WHILE;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 681 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_CONTINUE;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 682 "input_lexer.ll"
(*yylval) = gen(at_print,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 683 "input_lexer.ll"
(*yylval) = gen(at_Pause,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 684 "input_lexer.ll"
(*yylval) = gen(at_label,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 685 "input_lexer.ll"
(*yylval) = gen(at_goto,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 686 "input_lexer.ll"
(*yylval) = gen(at_Dialog,1) ; index_status(yyextra)=0; return TI_DIALOG; 
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 687 "input_lexer.ll"
(*yylval) = gen(at_Row,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 688 "input_lexer.ll"
(*yylval) = gen(at_Col,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 690 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_DELTALIST); return T_UNARY_OP_38; 
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 691 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_PILIST); return T_UNARY_OP_38; 
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 692 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPSUM); return T_UNARY_OP_38; 
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 693 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_SIGMALIST); return T_UNARY_OP_38;
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 694 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPDIFF); return T_UNARY_OP_38; 
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 695 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_HPINT); return T_UNARY_OP_38; 
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 696 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 697 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 698 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
/* old format for physical constants
"_hbar_"        (*yylval) = symbolic(at_unit,makevecteur(1.05457266e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
"_c_"        (*yylval) = symbolic(at_unit,makevecteur(299792458,_m_unit/_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
"_g_"        (*yylval) = symbolic(at_unit,makevecteur(9.80665,_m_unit*unitpow(_s_unit,-2))); index_status(yyextra)=0; return T_SYMBOL;
"_IO_" (*yylval) = symbolic(at_unit,makevecteur(1e-12,_W_unit*unitpow(_m_unit,-2))); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilonox_" (*yylval) = 3.9; index_status(yyextra)=0; return T_SYMBOL; 
"_epsilonsi_" (*yylval) = 11.9; index_status(yyextra)=0; return T_SYMBOL; 
"_qepsilon0_" (*yylval) = symbolic(at_unit,makevecteur(1.4185979e-30,_F_unit*_C_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilon0q_" (*yylval) = symbolic(at_unit,makevecteur(55263469.6,_F_unit/(_m_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
"_kq_" (*yylval) = symbolic(at_unit,makevecteur(8.617386e-5,_J_unit/(_K_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
"_c3_" (*yylval) = symbolic(at_unit,makevecteur(.002897756,_m_unit*_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_lambdac_" (*yylval) = symbolic(at_unit,makevecteur( 0.00242631058e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_f0_" (*yylval) = symbolic(at_unit,makevecteur(2.4179883e14,_Hz_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_lambda0_" (*yylval) = symbolic(at_unit,makevecteur(1239.8425e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_muN_" (*yylval) = symbolic(at_unit,makevecteur(5.0507866e-27,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_muB_" (*yylval) = symbolic(at_unit,makevecteur( 9.2740154e-24,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_a0_" (*yylval) = symbolic(at_unit,makevecteur(.0529177249e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_Rinfinity_" (*yylval) = symbolic(at_unit,makevecteur(10973731.534,unitpow(_m_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_Faraday_" (*yylval) = symbolic(at_unit,makevecteur(96485.309,_C_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_phi_" (*yylval) = symbolic(at_unit,makevecteur(2.06783461e-15,_Wb_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_alpha_" (*yylval) = 7.29735308e-3; index_status(yyextra)=0; return T_SYMBOL; 
"_mpme_" (*yylval) = 1836.152701; index_status(yyextra)=0; return T_SYMBOL; 
"_mp_" (*yylval) = symbolic(at_unit,makevecteur(1.6726231e-27,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_qme_" (*yylval) = symbolic(at_unit,makevecteur(1.75881962e11,_C_unit/_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_me_" (*yylval) = symbolic(at_unit,makevecteur(9.1093897e-31,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_qe_" (*yylval) = symbolic(at_unit,makevecteur(1.60217733e-19,_C_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_h_" (*yylval) = symbolic(at_unit,makevecteur(6.6260755e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_G_" (*yylval) = symbolic(at_unit,makevecteur(6.67259e-11,unitpow(_m_unit,3)*unitpow(_s_unit,-2)*unitpow(_kg_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_mu0_" (*yylval) = symbolic(at_unit,makevecteur(1.25663706144e-6,_H_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_epsilon0_" (*yylval) = symbolic(at_unit,makevecteur(8.85418781761e-12,_F_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_sigma_" (*yylval) = symbolic(at_unit,makevecteur( 5.67051e-8,_W_unit*unitpow(_m_unit,-2)*unitpow(_K_unit,-4))); index_status(yyextra)=0; return T_SYMBOL; 
"_StdP_" (*yylval) = symbolic(at_unit,makevecteur(101325.0,_Pa_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_StdT_" (*yylval) = symbolic(at_unit,makevecteur(273.15,_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_R_" (*yylval) = symbolic(at_unit,makevecteur(8.31451,_J_unit/_molK_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_Vm_" (*yylval) = symbolic(at_unit,makevecteur(22.4141,_l_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_k_" (*yylval) = symbolic(at_unit,makevecteur(1.380658e-23,_J_unit/_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_NA_" (*yylval) = symbolic(at_unit,makevecteur(6.0221367e23,unitpow(_mol_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
"_mSun_" (*yylval) = symbolic(at_unit,makevecteur(1.989e30,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_RSun_" (*yylval) = symbolic(at_unit,makevecteur(6.955e8,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_PSun_" (*yylval) = symbolic(at_unit,makevecteur(3.846e26,_W_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_mEarth_" (*yylval) = symbolic(at_unit,makevecteur(5.9736e24,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_REarth_" (*yylval) = symbolic(at_unit,makevecteur(6.371e6,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_sd_" (*yylval) = symbolic(at_unit,makevecteur(8.61640905e4,_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
"_syr_" (*yylval) = symbolic(at_unit,makevecteur(3.15581498e7,_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
                        */
/* numbers, also accept DMS e.g 1°15′27″13 */
case 361:
#line 746 "input_lexer.ll"
case 362:
#line 747 "input_lexer.ll"
case 363:
#line 748 "input_lexer.ll"
case 364:
#line 749 "input_lexer.ll"
case 365:
#line 750 "input_lexer.ll"
case 366:
#line 751 "input_lexer.ll"
case 367:
#line 752 "input_lexer.ll"
case 368:
#line 753 "input_lexer.ll"
case 369:
#line 754 "input_lexer.ll"
case 370:
#line 755 "input_lexer.ll"
case 371:
#line 756 "input_lexer.ll"
case 372:
#line 757 "input_lexer.ll"
case 373:
#line 758 "input_lexer.ll"
case 374:
#line 759 "input_lexer.ll"
case 375:
#line 760 "input_lexer.ll"
case 376:
#line 761 "input_lexer.ll"
case 377:
#line 762 "input_lexer.ll"
case 378:
#line 763 "input_lexer.ll"
case 379:
#line 764 "input_lexer.ll"
case 380:
#line 765 "input_lexer.ll"
case 381:
YY_RULE_SETUP
#line 765 "input_lexer.ll"
{ 
  index_status(yyextra)=1;
  int l=strlen(yytext);
  char ch,ch2;
  if (l>2 && yytext[1]!='x' && (yytext[l-1]=='o' || yytext[l-1]=='b' || yytext[l-1]=='h') ){
    char base=yytext[l-1];
    for (int i=l-1;i>1;--i){
      yytext[i]=yytext[i-1];
    }
    if (base=='h')
      base='x';
    yytext[1]=base;
  }
  else {
    for (l=0;(ch=*(yytext+l));++l){
      if (ch=='x')
	break;
      if (ch=='e' || ch=='E'){
	if ( (ch2=*(yytext+l+1)) && (ch2=='e' || ch2=='E')){
	  ++l;
	  for (;(ch=*(yytext+l));++l)
	    *(yytext+l-1)=ch;
	  *(yytext+l-1)=0;
	  --l;
	}
      }
#ifndef BCD
      if ( (ch==-30 && *(yytext+l+1)==-128) || (ch==-62 && *(yytext+l+1)==-80) ){
	*yylval=0; return T_NUMBER;
      }
#endif
      if (ch==-30 && *(yytext+l+1)==-120 &&  *(yytext+l+2)==-110){
	l += 3;
	for (;(ch=*(yytext+l));++l)
	  *(yytext+l-2)=ch;
	*(yytext+l-2)=0;
	l -= 3;
	*(yytext+l)='-';
      }
    }
  }
  (*yylval) = chartab2gen(yytext,yyextra); return T_NUMBER; 
}
	YY_BREAK
/* UNITS 
"_"{A}{AN}* {
  std::pair<const char * const * const,const char * const * const> pp=equal_range(unitname_tab,unitname_tab_end,yytext,tri2);
  if (pp.first!=pp.second && pp.second!=unitname_tab_end){
    gen tmp=mksa_register_unit(*pp.first,unitptr_tab[pp.first-unitname_tab]);
    (*yylval)=tmp;
    index_status(yyextra)=0;
    return T_SYMBOL;
  }
  int res=find_or_make_symbol(yytext+1,(*yylval),yyscanner,false,yyextra);
 (*yylval)=symb_unit(1,(*yylval),yyextra);
 return res;
}
			*/
/* symbols */
case 382:
#line 825 "input_lexer.ll"
case 383:
YY_RULE_SETUP
#line 825 "input_lexer.ll"
{
 index_status(yyextra)=1;
 int res=find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra);
 if (res==T_NUMBER)
   *yylval=(*yylval)(string2gen(unlocalize(yytext),false),yyextra);
 return res;
} 
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 832 "input_lexer.ll"
if (!xcas_mode(yyextra) || xcas_mode(yyextra)==3) { 
  // cerr << "hash" << endl;
  (*yylval)=gen(at_hash,1); return TI_HASH; 
} else BEGIN(comment_hash);
	YY_BREAK
case 385:
/* rule 385 can match eol */
YY_RULE_SETUP
#line 836 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);  /* comment_s(yyextra)=string(yytext); (*yylval)=string2gen(comment_s(yyextra).substr(0,comment_s(yyextra).size()-1),false); return T_COMMENT; */
	YY_BREAK
/* everything else */
case 386:
YY_RULE_SETUP
#line 838 "input_lexer.ll"
(*yylval)=string2gen(string(yytext),false); return T_STRING;
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 840 "input_lexer.ll"
ECHO;
	YY_BREAK
#line 3868 "input_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment_hash):
case YY_STATE_EOF(str):
case YY_STATE_EOF(backquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * giac_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( giac_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of giac_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					giac_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			giac_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) giac_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1176 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1176 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1175);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					giac_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( giac_yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void giac_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        giac_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	giac_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	giac_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void giac_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		giac_yypop_buffer_state();
	 *		giac_yypush_buffer_state(new_buffer);
     */
	giac_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	giac_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (giac_yywrap()) processing, but the only time this flag
	 * is looked at is after giac_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void giac_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE giac_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) giac_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	giac_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with giac_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void giac_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		giac_yyfree((void *) b->yy_ch_buf ,yyscanner );

	giac_yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a giac_yyrestart() or at EOF.
 */
    static void giac_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	giac_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then giac_yy_init_buffer was _probably_
     * called from giac_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void giac_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		giac_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	giac_yyensure_buffer_stack(yyscanner);

	/* This block is copied from giac_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from giac_yy_switch_to_buffer. */
	giac_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void giac_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		giac_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void giac_yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE giac_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	giac_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to giac_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       giac_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE giac_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return giac_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to giac_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE giac_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) giac_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = giac_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in giac_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE giac_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t giac_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *giac_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void giac_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see giac_yy_switch_to_buffer
 */
void giac_yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void giac_yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int giac_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void giac_yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * giac_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void giac_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* giac_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int giac_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* giac_yylex_init_extra has the same functionality as giac_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to giac_yyalloc in
 * the yyextra field.
 */

int giac_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    giac_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    giac_yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from giac_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * giac_yylex_init()
     */
    return 0;
}

/* giac_yylex_destroy is for both reentrant and non-reentrant scanners. */
int giac_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		giac_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	giac_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        giac_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * giac_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    giac_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *giac_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *giac_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void giac_yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see giac_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 840 "input_lexer.ll"



/*
 *  Routines
 */
#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC
    
    void update_lexer_localization(const std::vector<int> & v,std::map<std::string,std::string> &lexer_map,std::multimap<std::string,giac::localized_string> &back_lexer_map){
      lexer_map.clear();
      back_lexer_map.clear();
      int s=v.size();
      for (int i=0;i<s;++i){
	int lang=v[i];
	if (lang>=1 && lang<=4){
	  std::string doc=find_doc_prefix(lang);
	  std::string file=giac::giac_aide_dir()+doc+"keywords";
	  std::string giac_kw,local_kw;
	  size_t l;
	  char * line = (char *)malloc(1024);
	  ifstream f(file.c_str());
	  if (f){
	    cerr << "// Using keyword file " << file << endl;
	    for (;;){
	      f.getline(line,1023,'\n');
	      l=strlen(line);
	      if (f.eof()){
		f.close();
		break;
	      }
	      if (l>3 && line[0]!='#'){
		if (line[l-1]=='\n')
		  --l;
		// read giac keyword
		size_t j;
		giac_kw="";
		for (j=0;j<l;++j){
		  if (line[j]==' ')
		    break;
		  giac_kw += line[j];
		}
		// read corresponding local keywords
		local_kw="";
		for (++j;j<l;++j){
		  if (line[j]==' '){
		    if (!local_kw.empty()){
		      lexer_map[local_kw]=giac_kw;
		      back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		    }
		    local_kw="";
		  }
		  else
		    local_kw += line[j];
		}
		if (!local_kw.empty()){
		  lexer_map[local_kw]=giac_kw;
		  back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		}
	      }
	    }
	    free(line);
	  } // if (f)
	  else
	    cerr << "// Unable to find keyword file " << file << endl;
	}
      }
    }

    bool has_special_syntax(const char * s){
      std::pair<charptr_gen *,charptr_gen *> p=
	equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),
		    std::pair<const char *,gen>(s,0),
		    tri);
      if (p.first!=p.second && p.first!=builtin_lexer_functions_end())
	return (p.first->second.subtype!=T_UNARY_OP-256);
      map_charptr_gen::const_iterator i = lexer_functions().find(s);
      if (i==lexer_functions().end())
	return false;
      return (i->second.subtype!=T_UNARY_OP-256);
    }
    
    bool lexer_functions_register(const unary_function_ptr & u,const char * s,int parser_token){
      map_charptr_gen::const_iterator i = lexer_functions().find(s);
      if (i!=lexer_functions().end())
	return false;
      if (doing_insmod)
	registered_lexer_functions().push_back(user_function(s,parser_token));
      if (!builtin_lexer_functions_sorted){
#ifndef STATIC_BUILTIN_LEXER_FUNCTIONS
	builtin_lexer_functions_begin()[builtin_lexer_functions_number]=std::pair<const char *,gen>(s,gen(u));
	if (parser_token==1)
	  builtin_lexer_functions_begin()[builtin_lexer_functions_number].second.subtype=T_UNARY_OP-256;
	else
	  builtin_lexer_functions_begin()[builtin_lexer_functions_number].second.subtype=parser_token-256;
	builtin_lexer_functions_number++;
#endif
      }
      else {
	lexer_functions()[s] = gen(u);
	if (parser_token==1)
	  lexer_functions()[s].subtype=T_UNARY_OP-256;
	else
	  lexer_functions()[s].subtype=parser_token-256;
      }
      // If s is a library function name (with ::), update the library
      int ss=strlen(s),j=0;
      for (;j<ss-1;++j){
	if (s[j]==':' && s[j+1]==':')
	  break;
      }
      if (j<ss-1){
	string S(s);
	string libname=S.substr(0,j);
	string funcname=S.substr(j+2,ss-j-2);
	std::map<std::string,std::vector<string> >::iterator it=library_functions().find(libname);
	if (it!=library_functions().end())
	  it->second.push_back(funcname);
	else
	  library_functions()[libname]=vector<string>(1,funcname);
      }
      return true;
    }

    bool lexer_function_remove(const vector<user_function> & v){
      vector<user_function>::const_iterator it=v.begin(),itend=v.end();
      map_charptr_gen::const_iterator i,iend;
      bool ok=true;
      for (;it!=itend;++it){
	i = lexer_functions().find(it->s.c_str());
	iend=lexer_functions().end();
	if (i==iend)
	  ok=false;
	else
	  lexer_functions().erase(it->s.c_str());
      }
      return ok;
    }

    int find_or_make_symbol(const string & s,gen & res,void * scanner,bool check38,GIAC_CONTEXT){
      int tmpo=opened_quote(contextptr);
      if (tmpo & 2)
	check38=false;
      if (s.size()==1){
#ifdef GIAC_HAS_STO_38
	if (s[0]>='A' && s[0]<='Z'){
	  index_status(contextptr)=1; 
	  res=*tab_one_letter_idnt[s[0]-'A'];
	  return T_SYMBOL;
	}
	if (check38 && s[0]>='a' && s[0]<='z' && calc_mode(contextptr)==38)
	  giac_yyerror(scanner,invalid_name);
#else
	if (s[0]>='a' && s[0]<='z'){
	  if (check38 && calc_mode(contextptr)==38)
	    giac_yyerror(scanner,invalid_name);
	  index_status(contextptr)=1; 
	  res=*tab_one_letter_idnt[s[0]-'a'];
	  return T_SYMBOL;
	}
#endif
	switch (s[0]){
	case '+':
	  res=at_plus;
	  return T_UNARY_OP;
	case '-':
	  res=at_neg;
	  return T_UNARY_OP;
	case '*':
	  res=at_prod;
	  return T_UNARY_OP;
	case '/':
	  res=at_division;
	  return T_UNARY_OP;
	case '^':
	  res=at_pow;
	  return T_UNARY_OP;
	}
      }
      string ts(s);
      std::map<std::string,std::string>::const_iterator trans=lexer_localization_map().find(ts);
      if (trans!=lexer_localization_map().end())
	ts=trans->second;
      std::map<std::string,std::vector<string> >::const_iterator j=lexer_translator().find(ts);
      if (j!=lexer_translator().end() && !j->second.empty())
	ts=j->second.back();
      std::pair<charptr_gen *,charptr_gen *> p=equal_range(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),std::pair<const char *,gen>(ts.c_str(),0),tri);
      if (p.first!=p.second && p.first!=builtin_lexer_functions_end()){
	if (p.first->second.subtype==T_TO-256)
	  res=plus_one;
	else
	  res = p.first->second;
	res.subtype=1;
	if (builtin_lexer_functions_){
	  res=gen(int(builtin_lexer_functions_[p.first-builtin_lexer_functions_begin()]+p.first->second.val));
	  res=gen(*res._FUNCptr);
	}
	index_status(contextptr)=(p.first->second.subtype==T_UNARY_OP-256);
	int token=p.first->second.subtype;
	token += (token<0)?512:256 ;	
	return token;
      }
      lexer_tab_int_type tst={ts.c_str(),0,0,0,0};
      std::pair<const lexer_tab_int_type *,const lexer_tab_int_type *> pp = equal_range(lexer_tab_int_values,lexer_tab_int_values_end,tst,tri1);
      if (pp.first!=pp.second && pp.first!=lexer_tab_int_values_end){
	index_status(contextptr)=pp.first->status;
	res=int(pp.first->value);
	res.subtype=pp.first->subtype;
	return pp.first->return_value;
      }
      map_charptr_gen::const_iterator i = lexer_functions().find(ts.c_str());
      if (i!=lexer_functions().end()){
	if (i->second.subtype==T_TO-256)
	  res=plus_one;
	else
	  res = i->second;
	res.subtype=1;
	index_status(contextptr)=(i->second.subtype==T_UNARY_OP-256);
	return i->second.subtype+256 ;
      }
      sym_tab::const_iterator i2 = syms().find(s);
      if (i2 == syms().end()) {
	const char * S = s.c_str();
	// std::cerr << "lexer new" << s << endl;
	if (check38 && calc_mode(contextptr)==38 && strcmp(S,string_pi) && strcmp(S,string_euler_gamma) && strcmp(S,string_infinity) && strcmp(S,string_undef) && S[0]!='G'&& (!is_known_name_38 || !is_known_name_38(0,S))){
	  // detect invalid names and implicit multiplication 
	  size_t ss=strlen(S);
	  vecteur args;
	  for (size_t i=0;i<ss;++i){
	    char ch=S[i];
	    if (ch=='C' || (ch>='E' && ch<='H') || ch=='L' || ch=='M' || ch=='R'
		/* || ch=='S' */
		|| ch=='U' || ch=='V' || (ch>='X' && ch<='Z') ){
	      string name;
	      name += ch;
	      char c=0;
	      if (i<ss-1)
		c=s[i+1];
	      if (c>='0' && c<='9'){
		name += c;
		++i;
	      }
	      res = identificateur(name);
	      syms()[name.c_str()] = res;
	      args.push_back(res);
	    }
	    else {
	      string coeff;
	      for (++i;i<ss;++i){
		// up to next alphabetic char
		if (s[i]>32 && isalpha(s[i])){
		  --i;
		  break;
		}
		if (scanner && (s[i]<0 || s[i]>'z')){
		  giac_yyerror(scanner,invalid_name);
		  res=undef;
		  return T_SYMBOL;
		}
		coeff += s[i];
	      }
	      if (coeff.empty())
		res=1;
	      else
		res=atof(coeff.c_str());
	      if (ch=='i')
		res=res*cst_i;
	      else {
		if (ch=='e')
		  res=std::exp(1.0)*res;
		else {
		  // Invalid ident name, report error
		  if ( (ch>'Z' || ch<0) && scanner){
		    giac_yyerror(scanner,invalid_name);
		    res=undef;
		    return T_SYMBOL;
		  }
		  coeff=string(1,ch);
		  gen tmp = identificateur(coeff);
		  // syms()[coeff.c_str()]=tmp;
		  res=res*tmp;
		}
	      }
	      args.push_back(res);
	    }
	  }
	  if (args.size()==1)
	    res=args.front();
	  else 
	    res=_prod(args,contextptr);
	  syms()[s]=res;
	  return T_SYMBOL;
	} // end 38 compatibility mode
	res = identificateur(s);
	syms()[s] = res;
	return T_SYMBOL;
      } // end if ==syms.end()
      res = i2->second;
      return T_SYMBOL;
    }

  // Add to the list of predefined symbols
  void set_lexer_symbols(const vecteur & l,GIAC_CONTEXT){
    if (initialisation_done(contextptr))
      return;
    initialisation_done(contextptr)=true;
    const_iterateur it=l.begin(),itend=l.end();
    for (; it!=itend; ++it) {
      if (it->type!=_IDNT)
	continue;
      sym_tab::const_iterator i = syms().find(it->_IDNTptr->id_name);
      if (i==syms().end())
	syms()[it->_IDNTptr->name()] = *it;
    }
  }
  
    std::string translate_at(const char * ch){
      if (!strcmp(ch,"ΔLIST"))
	return "DELTALIST";
      if (!strcmp(ch,"ΠLIST"))
	return "PILIST";
      if (!strcmp(ch,"ΣLIST"))
	return "SIGMALIST";
      if (!strcmp(ch,"∫"))
	return "HPINT";
      if (!strcmp(ch,"∂"))
	return "HPDIFF";
      if (!strcmp(ch,"Σ"))
	return "HPSUM";
      if (!strcmp(ch,"∑"))
	return "HPSUM";
      string res;
      for (;*ch;++ch){
        if (*ch=='%')
          res +="PERCENT";
        else
          res += *ch;
      }
      return res;
    }
    
    // Set the input string
    // export GIAC_DEBUG=-2 to renew static_lexer.h/static_extern.h
    YY_BUFFER_STATE set_lexer_string(const std::string &s_orig,yyscan_t & scanner,GIAC_CONTEXT){
#if 0
      ofstream of("log"); // ends up in fir/windows/log
      of << s_orig<< endl;
#endif
      if (abs_calc_mode(contextptr)==38 && s_orig==string(s_orig.size(),' '))
	giac_yyerror(scanner,"Void string");
#ifndef RTOS_THREADX
      if (!builtin_lexer_functions_sorted){
#ifndef STATIC_BUILTIN_LEXER_FUNCTIONS
	sort(builtin_lexer_functions_begin(),builtin_lexer_functions_end(),tri);
#endif
	builtin_lexer_functions_sorted=true;
	int nfunc=builtin_lexer_functions_number;
	if (debug_infolevel==-2 || debug_infolevel==-4){
	  cerr << "Writing " << nfunc << " in static_lexer.h and static_extern.h "<< endl;
	  /*
	  ofstream static_add_ll("static_add.ll");
	  for (int i=0;i<nfunc;i++){
	    static_add_ll << "\"" << builtin_lexer_functions_begin()[i].first << "\" " ;
	    static_add_ll << "*yylval=gen(at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ",0); index_status(yyextra)=0; ";
	    static_add_ll << "return " << signed(builtin_lexer_functions_begin()[i].second.subtype)+256 << ";" ;
            static_add_ll << endl;
	  }
	  static_add_ll.close();
	  */
	  ofstream static_lexer("static_lexer.h");
	  for (int i=0;i<nfunc;i++){
	    static_lexer << "{\"" << builtin_lexer_functions_begin()[i].first << "\",13," << signed(builtin_lexer_functions_begin()[i].second.subtype) ;
	    if (debug_infolevel==-2)
	      static_lexer << ",0,*((unsigned longlong *) at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ")";
	    else
	      static_lexer << ",0,0"; 
	    if (builtin_lexer_functions_begin()[i].second._FUNCptr->quoted())
	      static_lexer << "| 1";
	    static_lexer << "}" ;
	    if (i!=nfunc-1)
	      static_lexer << ",";
	    static_lexer << endl;
	  }
	  static_lexer.close();
	  if (debug_infolevel==-4){
	    ofstream static_lexer_("static_lexer_.h");
	    for (int i=0;i<nfunc;i++){
	      static_lexer_ << "*((unsigned long *) at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ")";
	      if (i!=nfunc-1)
		static_lexer_ << ",";
	      static_lexer_ << endl;
	    }
	    static_lexer_.close();
	  }
	  ofstream static_extern("static_extern.h");
	  static_extern << "#ifndef STATIC_EXTERN" << endl;
	  static_extern << "#define STATIC_EXTERN" << endl;
	  static_extern << "struct unary_function_ptr;" << endl;
	  for (int i=0;i<nfunc;i++){
	    static_extern << "extern const unary_function_ptr * const  at_" << translate_at(builtin_lexer_functions_begin()[i].first) << ";" << endl;
	  }
	  static_extern << "#endif // STATIC_EXTERN" << endl;
	  static_extern.close();
	}
      }
#endif // RTOS_THREADX
      string s(s_orig),lexer_string;
      bool instring=false;
      // stupid match of bracket then parenthesis
      int l=s.size(),nb=0,np=0;
      int i=0;
      if (lexer_close_parenthesis(contextptr)){
	for (;i<l;++i){
	  if (s[i]==92){
	    i += 2;
	    if (i>=l)
	      break;
	  }
	  if (instring){
	    if (s[i]=='"')
	      instring=false;
	  }
	  else {
	    switch (s[i]){
	    case '"':
	      instring=true;
	      break;
	    case '(':
	      ++np;
	      break;
	    case ')':
	      --np;
	      break;
	    case '[':
	      ++nb;
	      break;
	    case ']':
	      --nb;
	      break;
	    }
	  }
	}
	while (np<0 && i>=0 && s[i-1]==')'){
	  --i;
	  ++np;
	}
	while (nb<0 && i>=0 && s[i-1]==']'){
	  --i;
	  ++nb;
	}
	s=s.substr(0,i);
	if (nb<0)
	  cerr << "Too many ]" << endl;
	if (np<0)
	  cerr << "Too many )" << endl;
	if (nb>0){
	  *logptr(contextptr) << "Warning adding " << nb << " ] at end of input" << endl;
	  s=s+string(nb,']');
	}
	if (np>0){
	  *logptr(contextptr) << "Warning adding " << np << " ) at end of input" << endl;
	  s=s+string(np,')');
	}
      }
      index_status(contextptr)=0;
      opened_quote(contextptr)=0;
      in_rpn(contextptr)=0;
      lexer_line_number(contextptr)=1;
      first_error_line(contextptr)=0;
      spread_formula(contextptr)=0;
      l=s.size();
      for (;l;l--){
	if (s[l-1]!=' ')
	  break;
      }
      // strings ending with :;
      while (l>=4 && s[l-1]==';' && s[l-2]==':'){
	// skip spaces before :;
	int m;
	for (m=l-3;m>0;--m){
	  if (s[m]!=' ')
	    break;
	}
	if (m<=1 || s[m]!=';')
	  break;
	if (s[m-1]==':')
	  l = m+1;
	else {
	  s[m]=':';
	  s[m+1]=';';
	  l=m+2;
	}
      }
      s=s.substr(0,l);
      /* if (l && ( (s[l-1]==';') || (s[l-1]==':')))
	 l--; */
      string ss;
      for (int i=0;i<l;++i){
	if (i && (unsigned char)s[i]==0xc2 && (unsigned char)s[i+1]!=0xb0)
	  ss += ' ';
	if ( (unsigned char)s[i]==0xe2 && i<l-3 ){
          if ((unsigned char)s[i+1]==0x89){ 
	    ss += ' ';
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x89	  
          if ((unsigned char)s[i+1]==0x88){ 
	    // mathop, add blank before and after except following an e/E 
	    if ((unsigned char) s[i+2]==0x91){ // sigma
	      ss += " SIGMA";
	      i +=2;
	      continue;
	    }
	    if ((unsigned char) s[i+2]==0x86){ // delta
	      ss += " DELTA";
	      i +=2;
	      continue;
	    }
	    if ((unsigned char) s[i+2]==0x8f){ // pi
	      ss += " PI";
	      i +=2;
	      continue;
	    }
	    if ( i>1 && (s[i-1]=='e' || s[i-1]=='E')){
	      ss +='-';
	      i +=2;
	      continue;
	    }
	    if (i>2  && (s[i-1]==' ' && (s[i-2]=='e' || s[i-2]=='E')) ){
	      ss[ss.size()-1] = '-';
	      i += 3;
	      continue;
	    }
	    ss += ' ';
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x88
          if ((unsigned char)s[i+1]==0x96 && ((unsigned char)s[i+2]==0xba || (unsigned char)s[i+2]==182 )){  
	    // sto 
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ++i;
	    ss += s[i];
	    ss += ' ';
	    continue;
	  } // 0xe2 0x96
	} //end if s[i]=0xe2
	if (s[i]=='.'){
	  if ( i && (i<l-1) && (s[i-1]!=' ') && (s[i+1]=='.') ){
	    ss+= " ..";
	    ++i;
	  }
	  else
	    ss+='.';
	}
	else {
	  if (xcas_mode(contextptr) > 0 && xcas_mode(contextptr) !=3){
	    if (s[i]=='#')
	      ss += "//";
	    else
	      ss += s[i];
	  }
	  else
	    ss+=s[i];
	}
      }
      // ofstream of("log"); of << s << endl << ss << endl; of.close();
      lexer_string = ss+" \n ÿ";
      giac_yylex_init(&scanner);
      giac_yyset_extra(contextptr,scanner);
      YY_BUFFER_STATE state=giac_yy_scan_string(lexer_string.c_str(),scanner);
      return state;
    }

    int delete_lexer_string(YY_BUFFER_STATE & state,yyscan_t & scanner){
      giac_yy_delete_buffer(state,scanner);
      giac_yylex_destroy(scanner);
      return 1;
    }

#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC
  

